help(nuke)
# Result: Help on package nuke:

NAME
    nuke - This module provides all the Nuke-specific functions and Classes.

FILE
    /method/cg/opt/Nuke6.0v4/plugins/nuke/__init__.py

PACKAGE CONTENTS
    callbacks
    executeInMain
    overrides
    rotopaint
    utils

CLASSES
    __builtin__.object
        __builtin__.AnimationCurve
        __builtin__.AnimationKey
        __builtin__.Box
        __builtin__.Format
        __builtin__.FrameRange
        __builtin__.FrameRanges
        __builtin__.GlobalsEnvironment
        __builtin__.Info
        __builtin__.Knob
            __builtin__.Array_Knob
                __builtin__.BBox_Knob
                __builtin__.Boolean_Knob
                __builtin__.Box3_Knob
                __builtin__.Color_Knob
                    __builtin__.AColor_Knob
                        __builtin__.Eyedropper_Knob
                __builtin__.Double_Knob
                __builtin__.IArray_Knob
                __builtin__.Int_Knob
                __builtin__.Keyer_Knob
                __builtin__.Range_Knob
                __builtin__.Scale_Knob
                __builtin__.UV_Knob
                __builtin__.Unsigned_Knob
                    __builtin__.ColorChip_Knob
                    __builtin__.Enumeration_Knob
                        __builtin__.Bitmask_Knob
                        __builtin__.OneView_Knob
                        __builtin__.Pulldown_Knob
                __builtin__.WH_Knob
                __builtin__.XYZ_Knob
                __builtin__.XY_Knob
            __builtin__.Axis_Knob
            __builtin__.BeginTabGroup_Knob
            __builtin__.Channel_Knob
                __builtin__.ChannelMask_Knob
            __builtin__.EndTabGroup_Knob
            __builtin__.Font_Knob
            __builtin__.Format_Knob
            __builtin__.Help_Knob
            __builtin__.Histogram_Knob
            __builtin__.Link_Knob
            __builtin__.LookupCurves_Knob
            __builtin__.MultiView_Knob
            __builtin__.Obsolete_Knob
            __builtin__.String_Knob
                __builtin__.EvalString_Knob
                    __builtin__.File_Knob
                    __builtin__.Multiline_Eval_String_Knob
                __builtin__.PythonKnob
                __builtin__.Script_Knob
                    __builtin__.PyCustom_Knob
                    __builtin__.PyScript_Knob
            __builtin__.Tab_Knob
            __builtin__.Text_Knob
            __builtin__.Transform2d_Knob
            __builtin__.ViewView_Knob
        __builtin__.Layer
        __builtin__.Lut
        __builtin__.MenuBar
        __builtin__.MenuItem
            __builtin__.Menu
        __builtin__.Node
            __builtin__.Group
                __builtin__.Gizmo
                __builtin__.Precomp
                __builtin__.Root
        __builtin__.NodeConstructor
        __builtin__.Nodes
        __builtin__.OutputContext
        __builtin__.Panel
        __builtin__.PanelNode
        __builtin__.ProgressTask
        __builtin__.RunInMainThread
        __builtin__.ToolBar
        __builtin__.Undo
        __builtin__.View
        __builtin__.ViewerProcess
        __builtin__.ViewerWindow
        nuke.utils.FnPySingleton
    
    class AColor_Knob(Color_Knob)
     |  AColor_Knob
     |  
     |  Method resolution order:
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc18d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class AnimationCurve(object)
     |  AnimationCurve
     |  
     |  Methods defined here:
     |  
     |  addKey(...)
     |      addKey([keys]) -> None.
     |      
     |      Insert a sequence of keys.
     |  
     |  changeInterpolation(...)
     |      changeInterpolation(keys, type) -> None.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Delete all keys.
     |  
     |  constant(...)
     |      constant() -> True if the animation appears to be a horizontal line, is a simple number, 
     |      or it is the default and all the points are at the same y value and have 0 slopes. False otherwise.
     |  
     |  derivative(...)
     |      derivative(t, n) -> float.
     |      
     |      Return the n'th derivative at time 't'.
     |  
     |  evaluate(...)
     |      evaluate(t) -> float.
     |      
     |      Return the value of the animation at time 't'.
     |  
     |  expression(...)
     |      expression() -> string.
     |  
     |  fixSlopes(...)
     |      fixSlopes(s) -> None.
     |  
     |  fromScript(...)
     |      fromScript(s) -> None.
     |  
     |  identity(...)
     |      identity() -> True if the animation appears to be such that y == x everywhere. This is True only for an expression of 'x' or the
     |      default expression and all points having y == x and slope == 1. Extrapolation is ignored.
     |  
     |  integrate(...)
     |      integrate(t1, t2) -> float.
     |      
     |      Return the area underneath the curve from t1 to t2.
     |  
     |  inverse(...)
     |      inverse(y) -> float.
     |      
     |      The inverse function at value y. This is the value of x such that evaluate(x) returns y.This is designed to invert color lookup tables. It only works if the derivative is zero or positive everywhere.
     |  
     |  keys(...)
     |      keys() -> [].
     |      
     |      List of keys.
     |  
     |  knob(...)
     |      knob() -> Knob.
     |      
     |      Return knob this animation belongs to.
     |  
     |  knobAndFieldName(...)
     |      knobAndFieldName() -> string.
     |      
     |      Return knob and field name combined (e.g. 'translate.x').
     |  
     |  knobIndex(...)
     |      knobIndex() -> int.
     |      
     |      Return the knob index this animation belongs to.
     |  
     |  noExpression(...)
     |      noExpression() -> True if the expression is the default expression (i.e. the keys control the curve), False otherwise.
     |  
     |  removeKey(...)
     |      removeKey([key]) -> None.
     |      
     |      Remove sequence of keys from the AnimationCurve.
     |  
     |  selected(...)
     |      identity() -> True if selected, False otherwise.
     |  
     |  setExpression(...)
     |      setExpression(s) -> None.
     |  
     |  setKey(...)
     |      setKey(t, y) -> Key.
     |      
     |      Set a key at time t and value y. If there is no key there one is created. If there is a key there it is moved
     |      vertically to be at y.  If a new key is inserted the interpolation and extrapolation are copied from a neighboring key,
     |      if there were no keys then it is set to nuke.SMOOTH interpolation and nuke.CONSTANT extrapolation.
     |  
     |  size(...)
     |      size() -> int.
     |      
     |      Number of keys.
     |  
     |  toScript(...)
     |      toScript(selected=False) -> string.
     |      
     |      Pass True for selected to only return selected curves.
     |  
     |  view(...)
     |      view() -> string.
     |      
     |      The view this AnimationCurve object is associated with.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0880>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class AnimationKey(object)
     |  AnimationKey
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  extrapolation
     |      Controls how to set the left slope of the first point and the right slope of the last point
     |  
     |  interpolation
     |      Used to calculate all the slopes except for the left slope of the first key and the right slope of the last key
     |  
     |  la
     |      The left 'bicubic' value
     |  
     |  lslope
     |      The derivative to the left of the point
     |  
     |  ra
     |      The right 'bicubic' value
     |  
     |  rslope
     |      The derivative to the right of the point
     |  
     |  selected
     |      True if the point is selected in the curve editor
     |  
     |  x
     |      The horizontal position of the point
     |  
     |  y
     |      The vertical position of the point
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa02c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Array_Knob(Knob)
     |  Array_Knob
     |  
     |  Method resolution order:
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ee45f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Axis_Knob(Knob)
     |  Axis_Knob
     |  
     |  Method resolution order:
     |      Axis_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  pivot(...)
     |      pivot() -> XYZ_Knob
     |      
     |      Return pivot knob.
     |  
     |  rotate(...)
     |      rotate() -> XYZ_Knob
     |      
     |      Return rotation knob.
     |  
     |  scale(...)
     |      scale() -> Scale_Knob
     |      
     |      Return scale knob.
     |  
     |  skew(...)
     |      skew() -> XYZ_Knob
     |      
     |      Return skew knob.
     |  
     |  translate(...)
     |      translate() -> XYZ_Knob
     |      
     |      Return translation knob.
     |  
     |  uniformScale(...)
     |      uniformScale() -> Double_Knob
     |      
     |      Return uniform scale knob.
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f396c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BBox_Knob(Array_Knob)
     |  BBox_Knob
     |  
     |  Method resolution order:
     |      BBox_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b4b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BeginTabGroup_Knob(Knob)
     |  BeginTabGroup_Knob
     |  
     |  Method resolution order:
     |      BeginTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38e10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Bitmask_Knob(Enumeration_Knob)
     |  Bitmask_Knob
     |  
     |  Method resolution order:
     |      Bitmask_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1100>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Boolean_Knob(Array_Knob)
     |  Boolean_Knob
     |  
     |  Method resolution order:
     |      Boolean_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705ad90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Box(object)
     |  Box
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  centerX(...)
     |      centerX() -> float
     |      
     |      Return center in X.
     |  
     |  centerY(...)
     |      centerY() -> float
     |      
     |      Return height in Y.
     |  
     |  clampX(...)
     |      clampX(x) -> int.
     |      
     |      Return x restricted to pointing at a pixel in the box.
     |  
     |  clampY(...)
     |      clampY(y) -> int.
     |      
     |      Return y restricted to pointing at a pixel in the box.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Set to is_constant().
     |  
     |  h(...)
     |      h() -> int
     |      
     |      Return height.
     |  
     |  intersect(...)
     |      intersect(x, y, r, t) -> None.
     |      
     |      Intersect with the given edges.
     |  
     |  isConstant(...)
     |      isConstant() -> True if box is 1x1 in both directions, False otherwise.
     |  
     |  merge(...)
     |      merge(x, y, r, t) -> None.
     |      
     |      Merge with the given edges.
     |  
     |  move(...)
     |      move(dx, dy) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  pad(...)
     |      pad(dx, dy, dr, dt) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  r(...)
     |      r() -> int
     |      
     |      Return right edge.
     |  
     |  set(...)
     |      set(x, y, r, t) -> None
     |      
     |      Set all values at once.
     |  
     |  setH(...)
     |      setH(n) -> None
     |      
     |      Set height by moving top edge.
     |  
     |  setR(...)
     |      setR(n) -> None
     |      
     |      Set right edge.
     |  
     |  setT(...)
     |      setT(n) -> None
     |      
     |      Set top edge.
     |  
     |  setW(...)
     |      setW(n) -> None
     |      
     |      Set width by moving right edge.
     |  
     |  setX(...)
     |      setX(n) -> None
     |      
     |      Set left edge.
     |  
     |  setY(...)
     |      setY(n) -> None
     |      
     |      Set bottom edge.
     |  
     |  t(...)
     |      t() -> int
     |      
     |      Return top edge.
     |  
     |  w(...)
     |      w() -> int
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> int
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> int
     |      
     |      Return bottom edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb46a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Box3_Knob(Array_Knob)
     |  Box3_Knob
     |  
     |  Method resolution order:
     |      Box3_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  f(...)
     |      Return value for F extent.
     |  
     |  n(...)
     |      Return value for N position.
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setF(...)
     |      Set value for F extent.
     |  
     |  setN(...)
     |      Set value for N position.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0350>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ChannelMask_Knob(Channel_Knob)
     |  ChannelMask_Knob
     |  
     |  Method resolution order:
     |      ChannelMask_Knob
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f384c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Channel_Knob:
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Channel_Knob(Knob)
     |  Channel_Knob
     |  
     |  Method resolution order:
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed8f80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ColorChip_Knob(Unsigned_Knob)
     |  ColorChip_Knob
     |  
     |  Method resolution order:
     |      ColorChip_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2780>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unsigned_Knob:
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Color_Knob(Array_Knob)
     |  Color_Knob
     |  
     |  Method resolution order:
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1680>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Double_Knob(Array_Knob)
     |  Double_Knob
     |  
     |  Method resolution order:
     |      Double_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b970>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EndTabGroup_Knob(Knob)
     |  EndTabGroup_Knob
     |  
     |  Method resolution order:
     |      EndTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Enumeration_Knob(Unsigned_Knob)
     |  Enumeration_Knob
     |  
     |  Method resolution order:
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38710>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EvalString_Knob(String_Knob)
     |  EvalString_Knob
     |  
     |  Method resolution order:
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d110>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Eyedropper_Knob(AColor_Knob)
     |  Eyedropper_Knob
     |  
     |  Method resolution order:
     |      Eyedropper_Knob
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1ae0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class File_Knob(EvalString_Knob)
     |  File_Knob
     |  
     |  Method resolution order:
     |      File_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      Set value of knob from a string.
     |  
     |  fromUserText(...)
     |      Set value of the knob from a string, parses frame range off the end and opens file to get set the format.
     |  
     |  getValue(...)
     |      Return value of knob.
     |  
     |  setValue(...)
     |      Set value of knob from a string.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063500>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FnPySingleton(__builtin__.object)
     |  Static methods defined here:
     |  
     |  __new__(type, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Font_Knob(Knob)
     |  Font_Knob
     |  
     |  Method resolution order:
     |      Font_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f392b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Format(object)
     |  Format
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  add(...)
     |      add(s) -> None
     |      
     |      Add this instance to a list of "named" formats.
     |  
     |  fromUV(...)
     |      fromUV(u, v) -> (x, y)
     |      
     |      Transform a UV coordinate in the range 0-1 into the format's XY range.
     |  
     |  height(...)
     |      height() -> int
     |      
     |      Return height of image file in pixels.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return user-visible name of format.
     |  
     |  pixelAspect(...)
     |      pixelAspect() -> float
     |      
     |      Return pixel aspect ratio.
     |  
     |  scaled(...)
     |      scaled(sx, sy, tx, ty) -> Format
     |      
     |      Scale and translate this format by sx, sy, tx and ty.
     |  
     |  setHeight(...)
     |      setHeight(n) -> None
     |      
     |      Set height of image file in pixels.
     |  
     |  setName(...)
     |      setName(s) -> None
     |      
     |      Set name of the format.
     |  
     |  setPixelAspect(...)
     |      setPixelAspect(n) -> None
     |      
     |      Set pixel aspect ratio.
     |  
     |  setWidth(...)
     |      setWidth(n) -> None
     |      
     |      Set width of image file in pixels.
     |  
     |  toUV(...)
     |      toUV(x, y) -> (u, v)
     |      
     |      Back-transform an XY coordinate in the format's space into UV space.
     |  
     |  width(...)
     |      width() -> int
     |      
     |      Return width of image file in pixels.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb48f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Format_Knob(Knob)
     |  Format_Knob
     |  
     |  Method resolution order:
     |      Format_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  actualValue(...)
     |      actualValue() -> Format.
     |      
     |      Return value of knob.
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  name(...)
     |      name() -> string.
     |      
     |      Return name of knob.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      setValue(format) -> True if succeeded, False otherwise.
     |      
     |      Set value of knob to format (either a Format object or a name of a format, e.g. "NTSC").
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  value(...)
     |      value() -> Format.
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0af0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FrameRange(object)
     |  FrameRange
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  first(...)
     |      first() -> int
     |      
     |      return the first frame of the range.
     |  
     |  frames(...)
     |      frames() -> int
     |      
     |      return the numbers of frames defined in the range.
     |  
     |  getFrame(...)
     |      getFrame(n) -> int
     |      
     |      return the frame according to the index, parameter n must be between 0 and frames().
     |  
     |  increment(...)
     |      increment() -> int
     |      
     |      return the increment between two frames.
     |  
     |  isInRange(...)
     |      isInRange(n) -> int
     |      
     |      return if the frame is inside the range.
     |  
     |  last(...)
     |      last() -> int
     |      
     |      return the last frame of the range.
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      return the maximun frame define in the range.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      return the minimun frame define in the range.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  setFirst(...)
     |      setFirst(n) -> None
     |      
     |      set the first frame of the range.
     |  
     |  setIncrement(...)
     |      setIncrement(n) -> None
     |      
     |      set the increment between two frames.
     |  
     |  setLast(...)
     |      setLast(n) -> None
     |      
     |      set the last frame of the range.
     |  
     |  stepFrame(...)
     |      stepFrame() -> int
     |      
     |      return the absolute increment between two frames.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb4a80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class FrameRanges(object)
     |  FrameRanges
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  add(...)
     |      add(r) -> None
     |      
     |      add a new frame range.
     |  
     |  clear(...)
     |      clear() -> None
     |      
     |      reset all store frame ranges.
     |  
     |  compact(...)
     |      compact() -> None
     |      
     |      compact all the frame ranges.
     |  
     |  getRange(...)
     |      getRange()-> FrameRange
     |      
     |      return a range from the list
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      get maximun frame of all ranges.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      get minimun frame of all ranges.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  size(...)
     |      size() -> int
     |      
     |      return the ranges number.
     |  
     |  toFrameList(...)
     |      toFrameList() -> [int]
     |      
     |      return a list of frames in a vector
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbd6e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Gizmo(Group)
     |  Method resolution order:
     |      Gizmo
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  command(...)
     |      command() -> string.
     |  
     |  filename(...)
     |      filename() -> string.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fae7d0>
    
    class GlobalsEnvironment(object)
     |  GlobalsEnvironment
     |  
     |  Methods defined here:
     |  
     |  __contains__(...)
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  get(...)
     |  
     |  has_key(...)
     |  
     |  items(...)
     |  
     |  keys(...)
     |  
     |  values(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1b20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Group(Node)
     |  Method resolution order:
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fad290>
    
    class Help_Knob(Knob)
     |  Help_Knob
     |  
     |  Method resolution order:
     |      Help_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb07f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Histogram_Knob(Knob)
     |  Histogram_Knob
     |  
     |  Method resolution order:
     |      Histogram_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class IArray_Knob(Array_Knob)
     |  IArray_Knob
     |  
     |  Method resolution order:
     |      IArray_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  dimensions(...)
     |      Return number of dimensions.
     |  
     |  height(...)
     |      Return height of the array.
     |  
     |  value(...)
     |      Return value of the array at position (x, y).
     |  
     |  width(...)
     |      Return width of the array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c080>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Info(object)
     |  Info
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  h(...)
     |      h() -> float
     |      
     |      Return height.
     |  
     |  w(...)
     |      w() -> float
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> float
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> float
     |      
     |      Return right edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fba650>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Int_Knob(Array_Knob)
     |  Int_Knob
     |  
     |  Method resolution order:
     |      Int_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef3c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Keyer_Knob(Array_Knob)
     |  Keyer_Knob
     |  
     |  Method resolution order:
     |      Keyer_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  highSoft(...)
     |  
     |  highTol(...)
     |  
     |  lowSoft(...)
     |  
     |  lowTol(...)
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name of argument n.
     |  
     |  value(...)
     |      value(oc, n) -> float
     |      
     |      Return value of argument n. The oc argument is an OutputContext.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc11e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Knob(object)
     |  Knob
     |  
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Layer(object)
     |  Layer
     |  
     |  Methods defined here:
     |  
     |  channels(...)
     |      channels() -> string list
     |  
     |  name(...)
     |      name() -> layer name
     |  
     |  setName(...)
     |      setName(n) -> None
     |  
     |  visible(...)
     |      visible() -> True if visible, False otherwise
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0c10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Link_Knob(Knob)
     |  Link_Knob
     |  
     |  Method resolution order:
     |      Link_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getLink(...)
     |      getLink() -> s
     |  
     |  getLinkedKnob(...)
     |      getLinkedKnob() -> knob
     |  
     |  makeLink(...)
     |      makeLink(s, t) -> None
     |  
     |  setLink(...)
     |      setLink(s) -> None
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fafeb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class LookupCurves_Knob(Knob)
     |  LookupCurves_Knob
     |  
     |  Method resolution order:
     |      LookupCurves_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  addCurve(...)
     |      addCurve(a) -> None, add an AnimationCurve
     |      
     |      ,or addCurve(name, expr) -> None, add curve with name and expr
     |  
     |  delCurve(...)
     |      delCurve(a) -> None, removes an AnimationCurve
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0f90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Lut(object)
     |  Lut
     |  
     |  Methods defined here:
     |  
     |  fromByte(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromByteSingle(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromFloat(...)
     |      fromFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to from_byte(x*255).
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  isLinear(...)
     |      isLinear() -> True if toByte(x) appears to return x*255, False otherwise.
     |  
     |  isZero(...)
     |      isLinear() -> True if toByte(0) returns a value <= 0, False otherwise.
     |  
     |  toByte(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toByteSingle(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toFloat(...)
     |      toFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to to_byte(x)/255.
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbdb80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Menu(MenuItem)
     |  Menu
     |  
     |  Method resolution order:
     |      Menu
     |      MenuItem
     |      object
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MenuItem:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MenuBar(object)
     |  MenuBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
    
    class MenuItem(object)
     |  MenuItem
     |  
     |  Methods defined here:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MultiView_Knob(Knob)
     |  MultiView_Knob
     |  
     |  Method resolution order:
     |      MultiView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  toScriptPrefix(...)
     |  
     |  toScriptPrefixUserKnob(...)
     |  
     |  value(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Multiline_Eval_String_Knob(EvalString_Knob)
     |  Multiline_Eval_String_Knob
     |  
     |  Method resolution order:
     |      Multiline_Eval_String_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d3a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Node(object)
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16facf50>
    
    class NodeConstructor(object)
     |  NodeConstructor
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe260>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Nodes(object)
     |  Nodes
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe020>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Obsolete_Knob(Knob)
     |  Obsolete_Knob
     |  
     |  Method resolution order:
     |      Obsolete_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Knob:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class OneView_Knob(Enumeration_Knob)
     |  OneView_Knob
     |  
     |  Method resolution order:
     |      OneView_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc01d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class OutputContext(object)
     |  OutputContext
     |  
     |  Methods defined here:
     |  
     |  frame(...)
     |      frame() -> float
     |      
     |      Return frame value.
     |  
     |  setFrame(...)
     |      setFrame(f) -> True
     |      
     |      Set frame value. The f argument is a float.
     |  
     |  setView(...)
     |      setView(n) -> True
     |      
     |      Set view number. The n argument is an integer in the range of 0 to number of views.
     |  
     |  view(...)
     |      view() -> int
     |      
     |      Return view number.
     |  
     |  viewcount(...)
     |      viewcount() -> int
     |      
     |      Return number of views.
     |  
     |  viewname(...)
     |      viewname(n) -> string
     |      
     |      Return name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  viewshort(...)
     |      viewshort(n) -> string
     |      
     |      Return short name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb3470>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Panel(object)
     |  Panel
     |  
     |  Methods defined here:
     |  
     |  addBooleanCheckBox(...)
     |      Add a check box.
     |  
     |  addButton(...)
     |      Add a button to the panel.
     |  
     |  addClipnameSearch(...)
     |      Add a text line with a folder button to enter and search clipnames.
     |  
     |  addEnumerationPulldown(...)
     |      Add a pulldown menu.
     |  
     |  addExpressionInput(...)
     |      Add an expression evaluator.
     |  
     |  addFilenameSearch(...)
     |      Add a text line with a folder button to enter and search filenames.
     |  
     |  addMultilineTextInput(...)
     |      Add an editable multiline widget.
     |  
     |  addNotepad(...)
     |      Add a text edit widget.
     |  
     |  addRGBColorChip(...)
     |      Add a color chooser widget.
     |  
     |  addScriptCommand(...)
     |      Add a script command evaluator.
     |  
     |  addSingleLineInput(...)
     |      Add an editable single line widget.
     |  
     |  addTextFontPulldown(...)
     |      Add a font chooser.
     |  
     |  clear(...)
     |      Clear all panel attributes.
     |  
     |  execute(...)
     |      Execute script command associated to particular label. Return result as string.
     |  
     |  setTitle(...)
     |      Set title used for the panel.
     |  
     |  setWidth(...)
     |      Set width used for panel construction.
     |  
     |  show(...)
     |      Display panel.
     |  
     |  title(...)
     |      Return current title for the panel.
     |  
     |  value(...)
     |      Return value associated to a particular label.
     |  
     |  width(...)
     |      Return current width used for panel construction.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c540>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PanelNode(object)
     |  PanelNode
     |  
     |  Methods defined here:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  createWidget(...)
     |      Create the widget for the panel
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb99c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Precomp(Group)
     |  Method resolution order:
     |      Precomp
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  reload(...)
     |      reload() -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16faeab0>
    
    class ProgressTask(object)
     |  ProgressTask
     |  
     |  Methods defined here:
     |  
     |  isCancelled(...)
     |      isCancelled() -> True if the user has requested the task to be cancelled.
     |  
     |  setMessage(...)
     |      setMessage(s) -> None.
     |      
     |      set the message for the progress task
     |  
     |  setProgress(...)
     |      setProgress(i) -> None.
     |      
     |      i is an integer representing the current progress
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa11d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Pulldown_Knob(Enumeration_Knob)
     |  Pulldown_Knob
     |  
     |  Method resolution order:
     |      Pulldown_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  commands(...)
     |      commands(n) -> string
     |      
     |      Return command n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  itemName(...)
     |      itemName(n) -> string
     |      
     |      Return name of item n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values.
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.NoOp()
     |      >>> k = nuke.Pulldown_Knob('kname', 'klabel')
     |      >>> w.addKnob(k)
     |      >>> k = w['kname']>>> k.setValues({'label/command' : '3*2'})
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyCustom_Knob(Script_Knob)
     |  PyCustom_Knob
     |  
     |  Method resolution order:
     |      PyCustom_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9b30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyScript_Knob(Script_Knob)
     |  PyScript_Knob
     |  
     |  Method resolution order:
     |      PyScript_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed98e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PythonKnob(String_Knob)
     |  PythonKnob
     |  
     |  Method resolution order:
     |      PythonKnob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063330>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Range_Knob(Array_Knob)
     |  Range_Knob
     |  
     |  Method resolution order:
     |      Range_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0a10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Root(Group)
     |  Method resolution order:
     |      Root
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addView(...)
     |      addView(v) -> None.
     |  
     |  canSetInput(...)
     |  
     |  clones(...)
     |  
     |  connectInput(...)
     |  
     |  deleteView(...)
     |      deleteView(v) -> None.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |  
     |  fps(...)
     |      fps() -> int.
     |  
     |  input(...)
     |  
     |  inputs(...)
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |  
     |  maximumInputs(...)
     |  
     |  maximumOutputs(...)
     |  
     |  mergeFrameRange(...)
     |      mergeFrameRange() -> None.
     |  
     |  minimumInputs(...)
     |  
     |  modified(...)
     |      modified() -> True if root is modified, False otherwise.
     |  
     |  optionalInput(...)
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  setFrame(...)
     |      setFrame(v) -> None.
     |  
     |  setInput(...)
     |  
     |  setModified(...)
     |      setModified(v) -> None.
     |  
     |  setProxy(...)
     |      setProxy() -> None.
     |  
     |  setView(...)
     |      setView(v) -> None.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fae430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  channels = <built-in method channels of type object at 0x16fae430>
     |      channels() -> list.
     |  
     |  layers = <built-in method layers of type object at 0x16fae430>
     |      layers() -> list.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  running = <built-in method running of type object at 0x16fae430>
    
    class RunInMainThread(object)
     |  RunInMainThread
     |  
     |  Data and other attributes defined here:
     |  
     |  request = <built-in method request of type object at 0x16fb9f80>
     |  
     |  
     |  result = <built-in method result of type object at 0x16fb9f80>
    
    class Scale_Knob(Array_Knob)
     |  Scale_Knob
     |  
     |  Method resolution order:
     |      Scale_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f3a000>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Script_Knob(String_Knob)
     |  Script_Knob
     |  
     |  Method resolution order:
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9440>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class String_Knob(Knob)
     |  String_Knob
     |  
     |  Method resolution order:
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2950>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Tab_Knob(Knob)
     |  Tab_Knob
     |  
     |  Method resolution order:
     |      Tab_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38bb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Text_Knob(Knob)
     |  Text_Knob
     |  
     |  Method resolution order:
     |      Text_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39480>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ToolBar(object)
     |  ToolBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705cde0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Transform2d_Knob(Knob)
     |  Transform2d_Knob
     |  
     |  Method resolution order:
     |      Transform2d_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  value(...)
     |      value(oc) -> matrix
     |      
     |      Return transformation matrix. The argument oc is an OutputContext. Both arguments are optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2bd0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class UV_Knob(Array_Knob)
     |  UV_Knob
     |  
     |  Method resolution order:
     |      UV_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb17b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Undo(object)
     |  Undo
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb32c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  begin = <built-in method begin of type object at 0x16fb32c0>
     |      Begin a new user-visible group of undo actions.
     |  
     |  cancel = <built-in method cancel of type object at 0x16fb32c0>
     |      Undoes any actions recorded in the current set and throws it away.
     |  
     |  disable = <built-in method disable of type object at 0x16fb32c0>
     |      Prevent recording undos until matching enable()
     |  
     |  disabled = <built-in method disabled of type object at 0x16fb32c0>
     |      True if disable() has been called
     |  
     |  enable = <built-in method enable of type object at 0x16fb32c0>
     |      Undoes the previous disable()
     |  
     |  end = <built-in method end of type object at 0x16fb32c0>
     |      Complete current undo set and add it to the undo list.
     |  
     |  name = <built-in method name of type object at 0x16fb32c0>
     |      Name current undo set.
     |  
     |  new = <built-in method new of type object at 0x16fb32c0>
     |      Same as end();begin().
     |  
     |  redo = <built-in method redo of type object at 0x16fb32c0>
     |      Redoes 0'th redo.
     |  
     |  redoDescribe = <built-in method redoDescribe of type object at 0x16fb3...
     |      Return short description of redo n.
     |  
     |  redoDescribeFully = <built-in method redoDescribeFully of type object ...
     |      Return long description of redo n.
     |  
     |  redoSize = <built-in method redoSize of type object at 0x16fb32c0>
     |      Number of redo's that can be done.
     |  
     |  redoTruncate = <built-in method redoTruncate of type object at 0x16fb3...
     |      Destroy any redo's greater or equal to n.
     |  
     |  undo = <built-in method undo of type object at 0x16fb32c0>
     |      Undoes 0'th undo.
     |  
     |  undoDescribe = <built-in method undoDescribe of type object at 0x16fb3...
     |      Return short description of undo n.
     |  
     |  undoDescribeFully = <built-in method undoDescribeFully of type object ...
     |      Return long description of undo n.
     |  
     |  undoSize = <built-in method undoSize of type object at 0x16fb32c0>
     |      Number of undo's that can be done.
     |  
     |  undoTruncate = <built-in method undoTruncate of type object at 0x16fb3...
     |      Destroy any undo's greater or equal to n.
    
    class Unsigned_Knob(Array_Knob)
     |  Unsigned_Knob
     |  
     |  Method resolution order:
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class View(object)
     |  View
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  string(...)
     |      string() -> string
     |      
     |      Return name of view.
     |  
     |  value(...)
     |      value() -> int
     |      
     |      Return value of view.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2e20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ViewView_Knob(Knob)
     |  ViewView_Knob
     |  
     |  Method resolution order:
     |      ViewView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc08d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ViewerProcess(object)
     |  ViewerProcess
     |  
     |  Data and other attributes defined here:
     |  
     |  node = <built-in method node of type object at 0x16fba2f0>
     |      node(name, viewer) -> Node
     |      Returns the ViewerProcess with name 'name' and beloging to viewer 'viewer'.
     |      Default is to return the current selected ViewerProcess node.
     |  
     |  register = <built-in method register of type object at 0x16fba2f0>
     |      register(name, call, args, kwargs) -> None
     |      Register a ViewerProcess using menu name 'name' and callable 'call' with args 'args' 
     |      and optional named arguments 'kwargs'.
     |  
     |  unregister = <built-in method unregister of type object at 0x16fba2f0>
     |      unregister(name) -> None
     |      Unregister a ViewerProcess using menu name 'name'.
    
    class ViewerWindow(object)
     |  ViewerWindow
     |  
     |  Methods defined here:
     |  
     |  activateInput(...)
     |      activateInput(input, secondary=False) -> None.
     |      
     |      Sets the given viewer input to be active - i. e. show its image in the output window.
     |      Set the "secondary" parameter to True to activate as a secondary (wipe) input instead of primary.
     |      If the input is not connected, a ValueError exception is raised.
     |  
     |  activeInput(...)
     |      activeInput(secondary=False) -> int.
     |      
     |      Returns the currently active input of the viewer - i. e. the one with its image in the output window.
     |      By default it returns the primary input.  Set 'secondary' to True to return the secondary (wipe) input, if any.
     |      Note that the indices returned start from 0, though the viewer inputs are labelled starting with 1.
     |      It returns None if no input is active.
     |  
     |  frameControl(...)
     |      frameControl(i) -> True.
     |      
     |      i is an integer indicating viewer frame control 'button' to execute:
     |      
     |         -6 go to start
     |         -5 go to previous keyframe
     |         -4 step back by increment
     |         -3 go back previous keyframe or increment, whichever is closer
     |         -2 step back one frame
     |      
     |         -1 play reverse
     |          0 stop
     |         +1 play forward
     |      
     |         +2 step forward one frame
     |         +3 go to next keyframe or increment, whichever is closer
     |         +4 step forward by increment
     |         +5 go to next keyframe
     |         +6 go to end
     |  
     |  nextView(...)
     |      nextView() -> switch to next view in settings Views list.
     |  
     |  node(...)
     |      node() -> Node
     |      
     |      Returns the Viewer node currently associated with this window.
     |  
     |  play(...)
     |      Play forward (1) or reverse (0).
     |  
     |  previousView(...)
     |      previousView() -> switch to previous view in settings Views list.
     |  
     |  setView(...)
     |      setView(s) -> set 'current' multi-view view to 's'.
     |  
     |  stop(...)
     |      Stop playing.
     |  
     |  view(...)
     |      view() -> string name of 'current' multi-view view.
    
    class WH_Knob(Array_Knob)
     |  WH_Knob
     |  
     |  Method resolution order:
     |      WH_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'.
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  x_at(...)
     |      Return value for X position at time 't'.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  y_at(...)
     |      Return value for Y position at time 't'.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705bbe0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XYZ_Knob(Array_Knob)
     |  XYZ_Knob
     |  
     |  Method resolution order:
     |      XYZ_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  parent(...)
     |      parent() -> XYZ_Knob
     |      
     |      Return parent.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39b60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XY_Knob(Array_Knob)
     |  XY_Knob
     |  
     |  Method resolution order:
     |      XY_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbfd30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.

FUNCTIONS
    IrToken(...)
        Nuke internal. Not for public use.
    
    activeViewer(...)
        activeViewer()->viewer.
        
        Returns the currently-active viewer.
    
    addAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after each frame of a render
    
    addAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after any renders
    
    addAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node to produce the text to draw on it
        in the DAG. Any value other than None is converted to a string and used
        as the text. None indicates that previously-added functions should
        be tried
    
    addBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before each frame of a render
    
    addBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before starting any renders
    
    addFavoriteDir(...)
        addFavoriteDir(name, directory, type, icon, tooltip, key) -> None.
        
        This function adds an item to the file chooser's favorite directory list.
        The name argument is the favourite list entry label ('Home', 'Desktop', etc.); directory is the filesystem path; type is optional and can be a bitwise OR combination of any of the constants nuke.IMAGE, nuke.SCRIPT, nuke.FONT, nuke.GEO, and nuke.PYTHON; tooltip is optional and is a short text explanatory description that appears when the pointer hovers over the favorite item; and key is an optional argument to add a shortcut key.
        The path name can contain environment variables which will be expanded when the user clicks the favourite's button.
    
    addFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Add a function to modify filenames before Nuke passes them to
        the operating system. The first argument to the function is the
        filename, and it should return the new filename. None is the same as
        returning the string unchanged. All added functions are called
        in backwards order.
    
    addFormat(...)
        addFormat(s) -> Format if succeeded, None otherwise.
        
        s is a string argument: w h ?x y r t? ?pa? name
                w, h: required - width and height in pixels.
                x, y, r, t: optional - image area, if smaller than 0, 0, w, h.
                pa: optional - pixel aspect ratio.
                name: required - format name.
        Create a new image format, which will show up on the pull-down menus for image formats.
        You must give a width and height and name. The xyrt rectangle describes the image area,
        if it is smaller than the width and height (for Academy aperture, for example). The
        pixel aspect is the ratio of the width of a pixel to the height.
    
    addKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when the user changes a knob
        The knob is availble in nuke.thisKnob() and the node in nuke.thisNode().
        This is also called with dummy knobs when the control panel is opened
        or when the inputs to the node changes. The purpose is to update other
        knobs in the control panel. Use addUpdateUI() for changes that
        should happen even when the panel is closed.
    
    addOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is created or undeleted
    
    addOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is destroyed
    
    addOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is closed
    
    addOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute when a script is loaded
    
    addOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is saved
    
    addOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when user creates a node
    
    addUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node when things change. This is done
        during idle, you cannot rely on it being done before it starts updating
        the viewer
    
    addView(...)
        addView(s)->None.
        
        Adds a new view to the list of views.
    
    afterFrameRender()
    
    afterRender()
    
    allNodes(...)
        allNodes(filter, group) -> node list.
        
        Return a list of all the child nodes of the group. The filter and group arguments are optional. If the group is ommitted the current group (ie the group the user picked a menu item from the toolbar of) is used. Use the filter argument to return all nodes of a particular class. If you need to get all the nodes in the script from a context which has no child nodes, for instance a control panel, use nuke.root().nodes().
    
    animation(...)
        animation(object, command, ...) -> None.
        
        Does operations on an animation curve.
    
    animationEnd(...)
        animationEnd() -> float.
        
        Return last frame of animation.
    
    animationIncrement(...)
        animationIncrement() -> float.
        
        Returns a recommended interval between samples of the currently selected animation.
    
    animationStart(...)
        animationStart() -> float.
        
        Return first frame of animation.
    
    animations(...)
        animations() -> tuple.
        
        Returns a list of animatable things the user wants to work on.
    
    ask(...)
        Show a Yes/No dialog. Returns True if user hits Yes button. Returns False otherwise.
    
    autolabel()
    
    autoplace(...)
        autoplace(n) -> None.
        
        Automatically place nodes, so they do not overlap. The argument n is a node.
    
    autoplaceSnap(...)
        autoplaceSnap(n) -> None.
        
        Move a node to the closest grid position. The argument n is a node.
    
    beforeFrameRender()
    
    beforeRender()
    
    cacheUsage(...)
        cacheUsage()->int
        
        Returns the current memory usage.
    
    cancel(...)
        cancel() -> None.
        
        Same as hitting cancel on the progress panel.
    
    channels(...)
        channels(n) -> (string) 
        
        List channels. The n argument is a Nuke node and if given only the channels output by this node are listed.If not given or None, all channels known about are listed. Returns a string list.
    
    clearDiskCache(...)
        Delete all files in the disk cache
    
    clone(...)
        clone(node, args, inpanel) -> node.
        
        Create a clone node that behaves identical to the original. The node argument is the node to be cloned, args and inpanel are optional arguments similar to createNode.
        A cloned node shares the exact same properties with its original. Clones share the same set of knobs and the same control panel. However they can have different positions and connections in the render tree. Any clone, including the original, can be deleted at any time without harming any of its clones.
    
    cloneSelected(...)
        cloneSelected(action) -> True if succeeded, False otherwise.
        
        This makes a clone of all selected nodes, preserving connections between them, and makes only the clones be selected. The action argument is optional, and if "copy" it cuts the resulting clones to the clipboard.
    
    collapseToGroup(...)
        collapseToGroup(show)->Node.
        
        Moves the currently selected nodes to a new group, maintaining their previous connections.If show is True ( the default ), the node graph for the new group is shown in the background.
    
    connectNodes(...)
        connectNodes()->None.
    
    connectViewer(...)
        connectViewer(i, n) -> None.
        
        Connect a viewer input to a node. The argument i is the input number and n is either a Nuke node or None.
        Some viewer in the current group is found, if there are no viewers one is created. The viewer is then altered to have at least n+1 inputs and then input n is connected to the given node.This function is used by the numeric shortcuts in the DAG view menu.
    
    createNode(...)
        createNode(node, args, inpanel) -> node.
        
        Creates a node of the specified type and adds it to the DAG. The parameter node is a string and represents the node class (e.g. Blur), args is an optional string containing a TCL list of name value pairs (like "size 50 quality 19") and inpanel is an optional boolean indicating if the control panel for the new node should be opened (default is True; only applies when the GUI is running).
    
    defaultFontPathname(...)
        defaultFontPathname()->string.
        
        Returns the path to the default font.
    
    defaultNodeColor(...)
        defaultNodeColor(s)->unsigned int.
        
        Returns the default node colour. The argument s is the node class.
    
    delete(...)
        delete(n) -> None.
        
        Delete node. It can be recovered with an undo.
    
    deleteView(...)
        deleteView(s)->None.
        
        Deletes a view from the list of views.
    
    dependencies(nodes, what=7)
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select the types of dependencies that are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          deps = nuke.dependencies([n2], nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS)
    
    dependentNodes(what=7, nodes=[])
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select what types of dependent nodes are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          ndeps = nuke.dependentNodes(nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS, [n1])
    
    display(...)
        display(s, o, t, w) -> None.
        
        Creates a dialog box showing the result of a script. The s argument is a python script, o is a Nuke node that provides the "context" of execution, t is an optional argument to set the window title and w is an optional argument for a preferred window width.
        Creates a window showing the result of command. The command is executed in the "context" of the given node, so this and a knob name in expressions refer to that node. In the window is an "update" button which causes the command to be run again.
    
    endGroup(...)
        endGroup() -> None.
        
        Changes the current group to the parent of the current group.
        Does nothing if the current group is a Root (the main window of a script).
    
    execute(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    executeInMainThread(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and return immediately.
    
    executeInMainThreadWithResult(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and wait for the result to become available.
    
    executeMultiple(...)
        executeMultiple((nodes), (ranges), (views)) -> None.
        
        executeMultiple((nodes), FrameRanges, (views)) -> None.
        
        Execute the specified nodes over the given frame range. The argument nodes is a sequence of Nuke nodes and ranges is a sequence of range lists. The named nodes must all be Write or other executable operators.
        A Nuke range list is a sequence of 3 integers - first, last and incr ( e.g. nuke.execute((w,), ((1,100,1),)) ). Alternatively, you can supply a FrameRanges object.
        
        If no nodes are given then all executable nodes in the current group are executed. If Nuke is run with the GUI up, this will pop up a progress meter. If the user hits the cancel button this command will raise a "cancelled" error. If Nuke is run in terminal mode (with the -t switch) this prints a text percentage as it progresses. If the user types ^C (on Unix) this command will raise a "cancelled" error.
    
    exists(...)
        Returns true if the named knob or node exists.
    
    expandSelectedGroup(...)
        expandSelectedGroup() -> node list.
        
        Moves all nodes from the currently selected group node into its parent group, maintaining node input and output connections, and deletes the group.
        Returns the nodes that were moved, which will also be selected.
    
    expr(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    expression(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    extractSelected(...)
        extractSelected()->None.
        
        Disconnects the selected nodes in the group from the tree, and shifts them to the side.
    
    filename(...)
        filename(node, replace) -> string.
        
        Return the filename(s) this node or group is working with. The node and replace arguments are optional.
         If replace is specified as nuke.REPLACE, all %%04d style sequences will be replaced with the current frame number. If no filenames are found, None is returned.
    
    filenameFilter(filename)
    
    forceClone(...)
        forceClone() -> True if succeeded, False otherwise.
    
    formats(...)
        formats()->list of formats.
        
        Returns a list of all available formats.
    
    frame(...)
        frame(i) -> int.
        
        Return or set the current frame number.
        Returns the current frame. Normally this is the frame number set in the root node, typically by the user moving the frame slider in a viewer. If a number is given, it sets the current frame number to that number. If the current context is the root this changes the root frame.
    
    fromNode(...)
        fromNode(n) -> s.
        
        Returns the node as a string. The argument n is a Nuke node.
        This function is most useful when combining Python and TCL scripts for backwards compatibility reasons.
    
    getClipname(...)
        getClipname(prompt, pattern = None, default = None, multiple = False) -> string or list of strings naming clips or None.
        
        Raise a file chooser dialog where filenames that only differ by an index number are compressed into a single entry called a 'clip'.
                prompt -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                multiple -> False for a single selection, True to allow multiple clips to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getColor(...)
        getColor(initial) -> int
        
        Raise a simple color chooser dialog and return the user-selected value.
        The format of the color values is packed 8bit rgb multiplied by 256 (ie in binary: 0xRRGGBB00).
    
    getFilename(...)
        getFilename(message, pattern = None, default = None, favorites = None, type = None, multiple = False) -> string or list of strings naming clips or None.
        
        Pops up a file chooser dialog and returns user input.
                message -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                favorites -> restrict favorites to this set: 'image', 'script', or 'font'
                type -> the type of browser, to define task-specific behaviors; currently only 'save' is recognised
                multiple -> False to require a single selection, True to allow multiple filenames to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getFramesAndViews(...)
        Pops up a box that lets the user select a frame range and a selection of views.
    
    getInput(...)
        Pops up a box that lets the user type in an arbitrary string.
    
    hotkeys(...)
        hotkeys() -> string 
        
        Returns the Nuke key assignments as a string formatted for use in nuke.display().
    
    inputs(...)
        inputs(node, number) -> int.
        
        Get how many inputs the node has. The argument node is a Nuke node and the optional argument number is the number of inputs requested.
        Normally this is a constant but some nodes have a variable number, the user can keep connecting them and the count will increase.
        Attempting to set the number will just disconnect all inputs greater or equal to number. For a variable input node this may decrease inputs to the new value. For most nodes this will have no effect on the value of inputs.
    
    invertSelection(...)
        invertSelection()->None.
        
        Selects all unselected nodes, and deselects all selected ones.
    
    knob(...)
        Nuke internal. Not for public use.
    
    knobChanged()
    
    knobDefault(...)
        knobDefault sets a default value for knobs in nodes that belong to the same class. All knobs with matching names, that are created after this command was issued, will default to the new value. If class is missing or is "*." then this default applies to all nodes with such a knob. If several values are supplied, the first value which is valid will be used as the default.
    
    layers(...)
        layers(node) -> string list.
        
        Lists layers. The node argument is optional.
    
    load(...)
        Loads a plugin. Returns True if successful.
    
    makeGroup(...)
        makeGroup(show)->Node.
        
        Creates a group from the currently selected nodes.If show is True ( the default ), the node graph for the new group is shown.
    
    memory(...)
        Get/set information about memory usage.
    
    menu(...)
        menu(name)->menu.
        
        Find and return the Menu object with the given name. Current valid menus are:
        
          'Nuke'          the application menu
          'Pane'          the UI Panes & Panels menu
          'Nodes'         the Nodes toolbar (and Nodegraph right mouse menu)
          'Properties'    the Properties panel right mouse menu
          'Animation'     the knob Animation menu and Curve Editor right mouse menu
          'Viewer'        the Viewer right mouse menu
          'Node Graph'    the Node Graph right mouse menu
        A RuntimeException is thrown if not in GUI mode.
    
    message(...)
        Show an info dialog box. Pops up an info box (with a 'i' and the text message) and waits for the user to hit the OK button.
    
    modified(...)
        modified(b) -> True if modified, False otherwise.
        
        Get or set the 'modified' flag in a script. The optional argument b is a boolean.
        Setting the value will turn the indicator in the title bar on/off and will start or stop the autosave timeout. If no argument is provided this returns the current modified state.
    
    nodeCopy(...)
        nodeCopy(s).
        
        Copy all selected nodes into a file or the clipboard. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    nodeDelete(...)
        nodeDelete(s) -> True if any nodes were selected, False otherwise.
        
        Removes all selected nodes from the DAG.
    
    nodePaste(...)
        nodePaste(s) -> node.
        
        Paste nodes from a script file or the clipboard.
        This function executes the script stored in a file. It is assumed the script is the result of a nodeCopy command. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    numvalue(...)
        numvalue(knob, default) -> float.
        
        The numvalue function returns the current value of a knob.
        This is the same as the value() command except it will always return a number. For enumerations this returns the index into the menu, starting at zero. For checkmarks this returns 0 for false and 1 for true.
    
    oculaPresent(...)
        Return true if Ocula is present.
    
    ofxMenu(...)
        ofxMenu(s) -> string.
        
        Find all the OFX plugins (by searching all the directories below $OFX_PLUGIN_PATH, or by reading a cache file stored in $NUKE_TEMP_DIR), then add a menu item for each of them to the main menu.
    
    ofxPluginPath(...)
        Returns a list of all the directories Nuke searched for OFX plugins in.
    
    onCreate()
    
    onDestroy()
    
    onScriptClose()
    
    onScriptLoad()
    
    onScriptSave()
    
    onUserCreate()
    
    output_redirector(...)
        Internal to Nuke. Not for public use.
    
    pluginAddPath(args, addToSysPath=True)
        Adds all the paths to the beginning of the Nuke plugin path.
        If the path already exists in the list of plugin paths, it is moved
        to the start. If this command is executed inside an init.py then
        the init.py in the path will be executed.
        It also adds the paths to the sys.path, if addToSysPath is True.
    
    pluginAppendPath(args, addToSysPath=True)
        Add a filepath to the end of the Nuke plugin path.  If the path
        already exists in the list of plugin paths, it will remain at its
        current position.
        It also appends the paths to the sys.path, if addToSysPath is True.
    
    pluginExists(...)
        Returns True if the given plugin exists in the plugin path, or False if not.
    
    pluginPath(...)
        Returns a list of all the directories Nuke will search for plugins in.
    
    plugins(...)
        plugins(switches, pattern)->list of plugin names
        
        Returns a list of every loaded plugin or every plugin available. By default each plugin is returned as the full pathname of the plugin file. You can give a glob-style matching pattern and only the plugins whose filenames (not path) match a glob pattern will be returned and you can give more than one glob pattern. You can also put options before the glob patterns. Currently supported:
        
          ALL    Return all plugins in each of the plugin_path() directories,
                 rather than only the currently loaded plugins.
        
          NODIR  Just put the filenames in the list, not the full path. There
                 may be duplicates.
        
        see also: load, pluginPath
    
    recentFile(...)
        Returns a filename from the recent-files list.
    
    redo(...)
        redo() -> None.
        
        Perform the most recent redo.
    
    removeAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeFavoriteDir(...)
        removeFavoriteDir(name, type) -> None.
        
        Remove a directory path from the favorites list. The name argument is the favourite path entry ('Home', 'Desktop', etc.) and type
        is an optional argument and is a bitwise OR combination of nuke.IMAGE, nuke.SCRIPT, nuke.FONT or nuke.GEO
    
    removeFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    render(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    restoreWindowLayout(...)
        restoreWindowLayout(i) -> None.
        
        Restores window layout.
    
    root(...)
        root() -> node 
        
        Return the DAG's root node. Always succeeds.
    
    runIn(...)
        Executes commands with a given node, knob, or curve object as the 'context'.This means that all names are evaluated relative to this object, and commands that modify 'this' node will modify the given one.
    
    sample(...)
        sample(n, c, x, y, dx, dy) -> float.
        
        Return pixel values from an image. The argument n is the node, the c argument 
        is a string with the channel name, the x and y arguments are the center of the area 
        to sample. The optional arguments dx and dy are the size of the area to sample.
    
    saveWindowLayout(...)
        saveWindowLayout(i)->int.
        
        Saves the current window layout. The optional argument i is an integer.
    
    scriptClear(...)
        Clears a Nuke script.
    
    scriptClose(...)
        Close the current script or group. Returns True if successful.
    
    scriptExit(...)
        Exit Nuke.
    
    scriptNew(...)
        Start a new script. Returns True if successful.
    
    scriptOpen(...)
        Opens a new script containing the contents of the named file.
    
    scriptReadFile(...)
        Read nodes from a file.
    
    scriptReadText(...)
        Read nodes from a string.
    
    scriptSave(...)
        scriptSave(filename = '')
        
        Saves the current script to the current file name. If there is no current file name and Nuke is running in GUI mode, the user is asked for a name using the file chooser.
        If a filename argument is provided, Nuke writes to that file without changing the script name in the project (use scriptSaveAs() if you want it to change).
    
    scriptSaveAs(...)
        scriptSaveAs(filename = '', overwrite = -1)
        
        Saves the current script with the given file name if supplied, or
        (in GUI mode) asks the user for one using the file chooser.
        Overwriting options are as below:
                True (1)  -> always overwrite
                False (0) -> never overwrite
                otherwise -> in GUI mode, ask the user; in terminal, same as False
    
    scriptSource(...)
        Same as scriptReadFile().
    
    selectAll(...)
        selectAll()->None.
        
        Selects all nodes in the DAG.
    
    selectConnectedNodes()
        Selects all nodes in the tree of the selected node.
    
    selectPattern(...)
        selectPattern()->None.
        
        Selects nodes according to a regular expression matching pattern, entered through an input dialog.
        The pattern can include wildcards ('?' and '*') as well as regular expressions.
        The expressions are checked against the node name, label, class, and associated file names.
    
    selectSimilar(...)
        selectSimilar(matchType)->None.
        
        Selects nodes that match a node in the current selection by either:
          nuke.MATCH_CLASS
          nuke.MATCH_LABEL
          nuke.MATCH_COLOR
    
    selectedNode(...)
        selectedNode() -> node.
        
        Returns the "node the user is thinking about".
        If several nodes are selected, this returns one of them. The one returned will be an "output" node in that no other selected nodes use that node as an input. If no nodes are selected, then if the last thing typed was a hotkey this returns the node the cursor is pointing at.If none, or the last event was not a hotkey, this produces a "No node selected" error.
    
    selectedNodes(...)
        selectedNodes(filter = None) -> node list.
        
        List all the selected nodes.
        Returns a list of all selected nodes in the current group. An attempt is made to return them in "useful" order where inputs are done before the final node, so commands applied to this list go from top-down. The argument filter instructs the algorithm to apply only to a specific class of nodes.
    
    show(...)
        show(n, forceFloat) -> None.
        
        Show the control panel of a node. The argument 'n' and 'forceFloat' are optional.
        If 'n' is not given the current node is used. The argument 'forceFloat' will open the window as a floating panel.
        Opens a window for each named node, as though the user double-clicked on them.  For normal operators this opens the control panel, for viewers it opens the viewer, for groups it opens the control panel.
    
    showDag(...)
        showDag(n) -> None.
        
        Show the tree view of a group node or opens a node control panel. The argument n is a node.
    
    showInfo(...)
        showInfo(node) -> string.
        
        Returns a long string of debugging information about each node and the operators it is currently managing. The node argument is optional.
    
    showSettings(...)
        showSettings() -> None.
        
        Show the settings of the current group.
    
    splayNodes(...)
        splayNodes() -> None.
    
    stderr_redirector(...)
        Internal to Nuke. Not for public use.
    
    tabClose(...)
        Close the active dock tab. Returns True if successful.
    
    tabNext(...)
        Make the next tabe in this dock active. Returns True if successful.
    
    tcl(...)
        tcl(command, arg, arg, ...) -> string.
        
        Run a tcl command. The arguments must be strings and passed to the command. If no arguments are given and the command has whitespace in it then it is instead interpreted as a tcl program (this is depreciated)
    
    thisClass(...)
        thisClass()->string.
        
        Same as thisNode().Class() but faster.
    
    thisGroup(...)
        thisGroup()->Group.
        
        Returns the current context Group node.
    
    thisKnob(...)
        thisKnob()->Knob.
        
        Returns the current context knob or None.
    
    thisNode(...)
        thisNode()->Node.
        
        Returns the current context node.
    
    thisPane(...)
        thisPane()->Pane.
        
        Returns the active pane. This is only valid during a pane menu callback or window layout restoration.
    
    thisParent(...)
        thisParent() -> Node.
        
        Returns the current context Node parent.
    
    toNode(...)
        toNode(s) -> node or None if doesn't exist.
        
        s is a string argument. Return a node in the DAG as a Python object.
    
    toggleFullscreen(...)
        toggleFullscreen() -> None.
        
        Toggles between windowed and fullscreen mode.
    
    toggleViewers(...)
        toggleAllViewers() -> None.
        
        Toggles all the viewers on and off.
    
    toolbar(...)
        toolbar(name, create)->ToolBar or None.
        
        Find and return the ToolBar object with the given name. The name of the built-in nodes toolbar is 'Nodes'.
        If the named ToolBar is not found and create is True, it will be created.
        If the named ToolBar is not found and create is False, None is returned.
        A RuntimeException is thrown if not in GUI mode.
    
    tprint(...)
        tprint(value, ..., sep=' ', end='\n', file=sys.stdout)
        
        Prints the values to a stream, or to sys.stdout by default.
        Optional keyword arguments:
        file: a file-like object (stream); defaults to the current sys.stdout.
        sep:  string inserted between values, default a space.
        end:  string appended after the last value, default a newline.
    
    undo(...)
        undo() -> None.
        
        Perform the most recent undo.
    
    updateUI()
    
    value(...)
        value(knob, default) -> string.
        
        The value function returns the current value of a knob. The knob argument is a string referring to a knob and default is an optional default value to be returned in case of an error. Unlike knob(), this will evaluate animation at the current frame, and expand brackets and dollar signs in string knobs.
    
    views(...)
        views() -> list of nodes.
        
        Return a list of all the globally existing views.
    
    zoom(...)
        zoom(scale, (center_x, center_y), group) -> double.
        
        Change the zoom and pan of a group's display. The scale argument is the new zoom factor. The (center_x, center_y) and group arguments are optional.
        If the group name is omitted then the current group is used. (Not yet implemented.)
        If the scale is given, but not the center, the zoom is set to the provided scale and the view is positioned so the cursor is pointing at the same place it was before zooming. A zero or negative scale value will cause a zoom-to-fit.
        If both scale and center arguments are given, the view is zoomed and then centered on the specified point.
        The new scale factor will be returned, or None if the function is run in a non-GUI context.

DATA
    AFTER_CONST = 21
    AFTER_LINEAR = 22
    ALL = 1
    BEFORE_CONST = 19
    BEFORE_LINEAR = 20
    BREAK = 18
    CONSTANT = 1
    CUBIC = 4
    DISABLED = 128
    ENDLINE = 8192
    EXE_PATH = '/method/cg/opt/Nuke6.0v4/Nuke6.0'
    EXPRESSIONS = 1
    FLOAT = 5
    FONT = 4
    GEO = 16
    GUI = True
    HIDDEN_INPUTS = 4
    HORIZONTAL = 17
    IMAGE = 1
    INPUTS = 2
    INT16 = 3
    INT8 = 2
    INTERACTIVE = True
    INVISIBLE = 1024
    LINEAR = 3
    LOG = 4
    MATCH_CLASS = 0
    MATCH_COLOR = 2
    MATCH_LABEL = 1
    MONITOR = 0
    NODIR = 2
    NO_ANIMATION = 256
    NO_POSTAGESTAMPS = False
    NO_UNDO = 524288
    NUKE_VERSION_DATE = 'Apr  8 2010'
    NUKE_VERSION_MAJOR = 6
    NUKE_VERSION_MINOR = 0
    NUKE_VERSION_PHASE = ''
    NUKE_VERSION_PHASENUMBER = 0
    NUKE_VERSION_RELEASE = 4
    NUKE_VERSION_STRING = '6.0v4'
    NUM_CPUS = 16
    NUM_INTERPOLATIONS = 5
    PLUGIN_EXT = 'so'
    PREPEND = 8
    PYTHON = 32
    REPLACE = 1
    SCRIPT = 2
    SMOOTH = 0
    STARTLINE = 4096
    TABBEGINCLOSEDGROUP = 2
    TABBEGINGROUP = 1
    TABENDGROUP = -1
    TABKNOB = 0
    THREADS = 16
    TO_SCRIPT = 1
    USER_SET_SLOPE = 16
    VIEWER = 1
    WRITE_ALL = 8
    WRITE_NON_DEFAULT_ONLY = 16
    WRITE_USER_KNOB_DEFS = 4
    __all__ = ['AColor_Knob', 'AFTER_CONST', 'AFTER_LINEAR', 'ALL', 'Anima...
    afterFrameRenders = {}
    afterRenders = {}
    autolabels = {'*': [(<function autolabel at 0x17262848>, (), {})]}
    beforeFrameRenders = {}
    beforeRenders = {}
    env = {'64bit': True, 'ExecutablePath': '/method/cg/op...True, 'numCPU...
    filenameFilters = {}
    knobChangeds = {}
    nodes = <Nodes object at 0x16f7c090>
    onCreates = {}
    onDestroys = {}
    onScriptCloses = {}
    onScriptLoads = {}
    onScriptSaves = {}
    onUserCreates = {}
    untitled = 'Untitled'
    updateUIs = {}


help(nuke)
# Result: Help on package nuke:

NAME
    nuke - This module provides all the Nuke-specific functions and Classes.

FILE
    /method/cg/opt/Nuke6.0v4/plugins/nuke/__init__.py

PACKAGE CONTENTS
    callbacks
    executeInMain
    overrides
    rotopaint
    utils

CLASSES
    __builtin__.object
        __builtin__.AnimationCurve
        __builtin__.AnimationKey
        __builtin__.Box
        __builtin__.Format
        __builtin__.FrameRange
        __builtin__.FrameRanges
        __builtin__.GlobalsEnvironment
        __builtin__.Info
        __builtin__.Knob
            __builtin__.Array_Knob
                __builtin__.BBox_Knob
                __builtin__.Boolean_Knob
                __builtin__.Box3_Knob
                __builtin__.Color_Knob
                    __builtin__.AColor_Knob
                        __builtin__.Eyedropper_Knob
                __builtin__.Double_Knob
                __builtin__.IArray_Knob
                __builtin__.Int_Knob
                __builtin__.Keyer_Knob
                __builtin__.Range_Knob
                __builtin__.Scale_Knob
                __builtin__.UV_Knob
                __builtin__.Unsigned_Knob
                    __builtin__.ColorChip_Knob
                    __builtin__.Enumeration_Knob
                        __builtin__.Bitmask_Knob
                        __builtin__.OneView_Knob
                        __builtin__.Pulldown_Knob
                __builtin__.WH_Knob
                __builtin__.XYZ_Knob
                __builtin__.XY_Knob
            __builtin__.Axis_Knob
            __builtin__.BeginTabGroup_Knob
            __builtin__.Channel_Knob
                __builtin__.ChannelMask_Knob
            __builtin__.EndTabGroup_Knob
            __builtin__.Font_Knob
            __builtin__.Format_Knob
            __builtin__.Help_Knob
            __builtin__.Histogram_Knob
            __builtin__.Link_Knob
            __builtin__.LookupCurves_Knob
            __builtin__.MultiView_Knob
            __builtin__.Obsolete_Knob
            __builtin__.String_Knob
                __builtin__.EvalString_Knob
                    __builtin__.File_Knob
                    __builtin__.Multiline_Eval_String_Knob
                __builtin__.PythonKnob
                __builtin__.Script_Knob
                    __builtin__.PyCustom_Knob
                    __builtin__.PyScript_Knob
            __builtin__.Tab_Knob
            __builtin__.Text_Knob
            __builtin__.Transform2d_Knob
            __builtin__.ViewView_Knob
        __builtin__.Layer
        __builtin__.Lut
        __builtin__.MenuBar
        __builtin__.MenuItem
            __builtin__.Menu
        __builtin__.Node
            __builtin__.Group
                __builtin__.Gizmo
                __builtin__.Precomp
                __builtin__.Root
        __builtin__.NodeConstructor
        __builtin__.Nodes
        __builtin__.OutputContext
        __builtin__.Panel
        __builtin__.PanelNode
        __builtin__.ProgressTask
        __builtin__.RunInMainThread
        __builtin__.ToolBar
        __builtin__.Undo
        __builtin__.View
        __builtin__.ViewerProcess
        __builtin__.ViewerWindow
        nuke.utils.FnPySingleton
    
    class AColor_Knob(Color_Knob)
     |  AColor_Knob
     |  
     |  Method resolution order:
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc18d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class AnimationCurve(object)
     |  AnimationCurve
     |  
     |  Methods defined here:
     |  
     |  addKey(...)
     |      addKey([keys]) -> None.
     |      
     |      Insert a sequence of keys.
     |  
     |  changeInterpolation(...)
     |      changeInterpolation(keys, type) -> None.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Delete all keys.
     |  
     |  constant(...)
     |      constant() -> True if the animation appears to be a horizontal line, is a simple number, 
     |      or it is the default and all the points are at the same y value and have 0 slopes. False otherwise.
     |  
     |  derivative(...)
     |      derivative(t, n) -> float.
     |      
     |      Return the n'th derivative at time 't'.
     |  
     |  evaluate(...)
     |      evaluate(t) -> float.
     |      
     |      Return the value of the animation at time 't'.
     |  
     |  expression(...)
     |      expression() -> string.
     |  
     |  fixSlopes(...)
     |      fixSlopes(s) -> None.
     |  
     |  fromScript(...)
     |      fromScript(s) -> None.
     |  
     |  identity(...)
     |      identity() -> True if the animation appears to be such that y == x everywhere. This is True only for an expression of 'x' or the
     |      default expression and all points having y == x and slope == 1. Extrapolation is ignored.
     |  
     |  integrate(...)
     |      integrate(t1, t2) -> float.
     |      
     |      Return the area underneath the curve from t1 to t2.
     |  
     |  inverse(...)
     |      inverse(y) -> float.
     |      
     |      The inverse function at value y. This is the value of x such that evaluate(x) returns y.This is designed to invert color lookup tables. It only works if the derivative is zero or positive everywhere.
     |  
     |  keys(...)
     |      keys() -> [].
     |      
     |      List of keys.
     |  
     |  knob(...)
     |      knob() -> Knob.
     |      
     |      Return knob this animation belongs to.
     |  
     |  knobAndFieldName(...)
     |      knobAndFieldName() -> string.
     |      
     |      Return knob and field name combined (e.g. 'translate.x').
     |  
     |  knobIndex(...)
     |      knobIndex() -> int.
     |      
     |      Return the knob index this animation belongs to.
     |  
     |  noExpression(...)
     |      noExpression() -> True if the expression is the default expression (i.e. the keys control the curve), False otherwise.
     |  
     |  removeKey(...)
     |      removeKey([key]) -> None.
     |      
     |      Remove sequence of keys from the AnimationCurve.
     |  
     |  selected(...)
     |      identity() -> True if selected, False otherwise.
     |  
     |  setExpression(...)
     |      setExpression(s) -> None.
     |  
     |  setKey(...)
     |      setKey(t, y) -> Key.
     |      
     |      Set a key at time t and value y. If there is no key there one is created. If there is a key there it is moved
     |      vertically to be at y.  If a new key is inserted the interpolation and extrapolation are copied from a neighboring key,
     |      if there were no keys then it is set to nuke.SMOOTH interpolation and nuke.CONSTANT extrapolation.
     |  
     |  size(...)
     |      size() -> int.
     |      
     |      Number of keys.
     |  
     |  toScript(...)
     |      toScript(selected=False) -> string.
     |      
     |      Pass True for selected to only return selected curves.
     |  
     |  view(...)
     |      view() -> string.
     |      
     |      The view this AnimationCurve object is associated with.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0880>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class AnimationKey(object)
     |  AnimationKey
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  extrapolation
     |      Controls how to set the left slope of the first point and the right slope of the last point
     |  
     |  interpolation
     |      Used to calculate all the slopes except for the left slope of the first key and the right slope of the last key
     |  
     |  la
     |      The left 'bicubic' value
     |  
     |  lslope
     |      The derivative to the left of the point
     |  
     |  ra
     |      The right 'bicubic' value
     |  
     |  rslope
     |      The derivative to the right of the point
     |  
     |  selected
     |      True if the point is selected in the curve editor
     |  
     |  x
     |      The horizontal position of the point
     |  
     |  y
     |      The vertical position of the point
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa02c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Array_Knob(Knob)
     |  Array_Knob
     |  
     |  Method resolution order:
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ee45f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Axis_Knob(Knob)
     |  Axis_Knob
     |  
     |  Method resolution order:
     |      Axis_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  pivot(...)
     |      pivot() -> XYZ_Knob
     |      
     |      Return pivot knob.
     |  
     |  rotate(...)
     |      rotate() -> XYZ_Knob
     |      
     |      Return rotation knob.
     |  
     |  scale(...)
     |      scale() -> Scale_Knob
     |      
     |      Return scale knob.
     |  
     |  skew(...)
     |      skew() -> XYZ_Knob
     |      
     |      Return skew knob.
     |  
     |  translate(...)
     |      translate() -> XYZ_Knob
     |      
     |      Return translation knob.
     |  
     |  uniformScale(...)
     |      uniformScale() -> Double_Knob
     |      
     |      Return uniform scale knob.
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f396c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BBox_Knob(Array_Knob)
     |  BBox_Knob
     |  
     |  Method resolution order:
     |      BBox_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b4b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BeginTabGroup_Knob(Knob)
     |  BeginTabGroup_Knob
     |  
     |  Method resolution order:
     |      BeginTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38e10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Bitmask_Knob(Enumeration_Knob)
     |  Bitmask_Knob
     |  
     |  Method resolution order:
     |      Bitmask_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1100>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Boolean_Knob(Array_Knob)
     |  Boolean_Knob
     |  
     |  Method resolution order:
     |      Boolean_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705ad90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Box(object)
     |  Box
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  centerX(...)
     |      centerX() -> float
     |      
     |      Return center in X.
     |  
     |  centerY(...)
     |      centerY() -> float
     |      
     |      Return height in Y.
     |  
     |  clampX(...)
     |      clampX(x) -> int.
     |      
     |      Return x restricted to pointing at a pixel in the box.
     |  
     |  clampY(...)
     |      clampY(y) -> int.
     |      
     |      Return y restricted to pointing at a pixel in the box.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Set to is_constant().
     |  
     |  h(...)
     |      h() -> int
     |      
     |      Return height.
     |  
     |  intersect(...)
     |      intersect(x, y, r, t) -> None.
     |      
     |      Intersect with the given edges.
     |  
     |  isConstant(...)
     |      isConstant() -> True if box is 1x1 in both directions, False otherwise.
     |  
     |  merge(...)
     |      merge(x, y, r, t) -> None.
     |      
     |      Merge with the given edges.
     |  
     |  move(...)
     |      move(dx, dy) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  pad(...)
     |      pad(dx, dy, dr, dt) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  r(...)
     |      r() -> int
     |      
     |      Return right edge.
     |  
     |  set(...)
     |      set(x, y, r, t) -> None
     |      
     |      Set all values at once.
     |  
     |  setH(...)
     |      setH(n) -> None
     |      
     |      Set height by moving top edge.
     |  
     |  setR(...)
     |      setR(n) -> None
     |      
     |      Set right edge.
     |  
     |  setT(...)
     |      setT(n) -> None
     |      
     |      Set top edge.
     |  
     |  setW(...)
     |      setW(n) -> None
     |      
     |      Set width by moving right edge.
     |  
     |  setX(...)
     |      setX(n) -> None
     |      
     |      Set left edge.
     |  
     |  setY(...)
     |      setY(n) -> None
     |      
     |      Set bottom edge.
     |  
     |  t(...)
     |      t() -> int
     |      
     |      Return top edge.
     |  
     |  w(...)
     |      w() -> int
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> int
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> int
     |      
     |      Return bottom edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb46a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Box3_Knob(Array_Knob)
     |  Box3_Knob
     |  
     |  Method resolution order:
     |      Box3_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  f(...)
     |      Return value for F extent.
     |  
     |  n(...)
     |      Return value for N position.
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setF(...)
     |      Set value for F extent.
     |  
     |  setN(...)
     |      Set value for N position.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0350>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ChannelMask_Knob(Channel_Knob)
     |  ChannelMask_Knob
     |  
     |  Method resolution order:
     |      ChannelMask_Knob
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f384c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Channel_Knob:
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Channel_Knob(Knob)
     |  Channel_Knob
     |  
     |  Method resolution order:
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed8f80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ColorChip_Knob(Unsigned_Knob)
     |  ColorChip_Knob
     |  
     |  Method resolution order:
     |      ColorChip_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2780>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unsigned_Knob:
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Color_Knob(Array_Knob)
     |  Color_Knob
     |  
     |  Method resolution order:
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1680>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Double_Knob(Array_Knob)
     |  Double_Knob
     |  
     |  Method resolution order:
     |      Double_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b970>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EndTabGroup_Knob(Knob)
     |  EndTabGroup_Knob
     |  
     |  Method resolution order:
     |      EndTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Enumeration_Knob(Unsigned_Knob)
     |  Enumeration_Knob
     |  
     |  Method resolution order:
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38710>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EvalString_Knob(String_Knob)
     |  EvalString_Knob
     |  
     |  Method resolution order:
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d110>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Eyedropper_Knob(AColor_Knob)
     |  Eyedropper_Knob
     |  
     |  Method resolution order:
     |      Eyedropper_Knob
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1ae0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class File_Knob(EvalString_Knob)
     |  File_Knob
     |  
     |  Method resolution order:
     |      File_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      Set value of knob from a string.
     |  
     |  fromUserText(...)
     |      Set value of the knob from a string, parses frame range off the end and opens file to get set the format.
     |  
     |  getValue(...)
     |      Return value of knob.
     |  
     |  setValue(...)
     |      Set value of knob from a string.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063500>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FnPySingleton(__builtin__.object)
     |  Static methods defined here:
     |  
     |  __new__(type, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Font_Knob(Knob)
     |  Font_Knob
     |  
     |  Method resolution order:
     |      Font_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f392b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Format(object)
     |  Format
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  add(...)
     |      add(s) -> None
     |      
     |      Add this instance to a list of "named" formats.
     |  
     |  fromUV(...)
     |      fromUV(u, v) -> (x, y)
     |      
     |      Transform a UV coordinate in the range 0-1 into the format's XY range.
     |  
     |  height(...)
     |      height() -> int
     |      
     |      Return height of image file in pixels.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return user-visible name of format.
     |  
     |  pixelAspect(...)
     |      pixelAspect() -> float
     |      
     |      Return pixel aspect ratio.
     |  
     |  scaled(...)
     |      scaled(sx, sy, tx, ty) -> Format
     |      
     |      Scale and translate this format by sx, sy, tx and ty.
     |  
     |  setHeight(...)
     |      setHeight(n) -> None
     |      
     |      Set height of image file in pixels.
     |  
     |  setName(...)
     |      setName(s) -> None
     |      
     |      Set name of the format.
     |  
     |  setPixelAspect(...)
     |      setPixelAspect(n) -> None
     |      
     |      Set pixel aspect ratio.
     |  
     |  setWidth(...)
     |      setWidth(n) -> None
     |      
     |      Set width of image file in pixels.
     |  
     |  toUV(...)
     |      toUV(x, y) -> (u, v)
     |      
     |      Back-transform an XY coordinate in the format's space into UV space.
     |  
     |  width(...)
     |      width() -> int
     |      
     |      Return width of image file in pixels.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb48f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Format_Knob(Knob)
     |  Format_Knob
     |  
     |  Method resolution order:
     |      Format_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  actualValue(...)
     |      actualValue() -> Format.
     |      
     |      Return value of knob.
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  name(...)
     |      name() -> string.
     |      
     |      Return name of knob.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      setValue(format) -> True if succeeded, False otherwise.
     |      
     |      Set value of knob to format (either a Format object or a name of a format, e.g. "NTSC").
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  value(...)
     |      value() -> Format.
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0af0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FrameRange(object)
     |  FrameRange
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  first(...)
     |      first() -> int
     |      
     |      return the first frame of the range.
     |  
     |  frames(...)
     |      frames() -> int
     |      
     |      return the numbers of frames defined in the range.
     |  
     |  getFrame(...)
     |      getFrame(n) -> int
     |      
     |      return the frame according to the index, parameter n must be between 0 and frames().
     |  
     |  increment(...)
     |      increment() -> int
     |      
     |      return the increment between two frames.
     |  
     |  isInRange(...)
     |      isInRange(n) -> int
     |      
     |      return if the frame is inside the range.
     |  
     |  last(...)
     |      last() -> int
     |      
     |      return the last frame of the range.
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      return the maximun frame define in the range.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      return the minimun frame define in the range.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  setFirst(...)
     |      setFirst(n) -> None
     |      
     |      set the first frame of the range.
     |  
     |  setIncrement(...)
     |      setIncrement(n) -> None
     |      
     |      set the increment between two frames.
     |  
     |  setLast(...)
     |      setLast(n) -> None
     |      
     |      set the last frame of the range.
     |  
     |  stepFrame(...)
     |      stepFrame() -> int
     |      
     |      return the absolute increment between two frames.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb4a80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class FrameRanges(object)
     |  FrameRanges
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  add(...)
     |      add(r) -> None
     |      
     |      add a new frame range.
     |  
     |  clear(...)
     |      clear() -> None
     |      
     |      reset all store frame ranges.
     |  
     |  compact(...)
     |      compact() -> None
     |      
     |      compact all the frame ranges.
     |  
     |  getRange(...)
     |      getRange()-> FrameRange
     |      
     |      return a range from the list
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      get maximun frame of all ranges.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      get minimun frame of all ranges.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  size(...)
     |      size() -> int
     |      
     |      return the ranges number.
     |  
     |  toFrameList(...)
     |      toFrameList() -> [int]
     |      
     |      return a list of frames in a vector
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbd6e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Gizmo(Group)
     |  Method resolution order:
     |      Gizmo
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  command(...)
     |      command() -> string.
     |  
     |  filename(...)
     |      filename() -> string.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fae7d0>
    
    class GlobalsEnvironment(object)
     |  GlobalsEnvironment
     |  
     |  Methods defined here:
     |  
     |  __contains__(...)
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  get(...)
     |  
     |  has_key(...)
     |  
     |  items(...)
     |  
     |  keys(...)
     |  
     |  values(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1b20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Group(Node)
     |  Method resolution order:
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fad290>
    
    class Help_Knob(Knob)
     |  Help_Knob
     |  
     |  Method resolution order:
     |      Help_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb07f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Histogram_Knob(Knob)
     |  Histogram_Knob
     |  
     |  Method resolution order:
     |      Histogram_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class IArray_Knob(Array_Knob)
     |  IArray_Knob
     |  
     |  Method resolution order:
     |      IArray_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  dimensions(...)
     |      Return number of dimensions.
     |  
     |  height(...)
     |      Return height of the array.
     |  
     |  value(...)
     |      Return value of the array at position (x, y).
     |  
     |  width(...)
     |      Return width of the array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c080>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Info(object)
     |  Info
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  h(...)
     |      h() -> float
     |      
     |      Return height.
     |  
     |  w(...)
     |      w() -> float
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> float
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> float
     |      
     |      Return right edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fba650>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Int_Knob(Array_Knob)
     |  Int_Knob
     |  
     |  Method resolution order:
     |      Int_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef3c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Keyer_Knob(Array_Knob)
     |  Keyer_Knob
     |  
     |  Method resolution order:
     |      Keyer_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  highSoft(...)
     |  
     |  highTol(...)
     |  
     |  lowSoft(...)
     |  
     |  lowTol(...)
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name of argument n.
     |  
     |  value(...)
     |      value(oc, n) -> float
     |      
     |      Return value of argument n. The oc argument is an OutputContext.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc11e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Knob(object)
     |  Knob
     |  
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Layer(object)
     |  Layer
     |  
     |  Methods defined here:
     |  
     |  channels(...)
     |      channels() -> string list
     |  
     |  name(...)
     |      name() -> layer name
     |  
     |  setName(...)
     |      setName(n) -> None
     |  
     |  visible(...)
     |      visible() -> True if visible, False otherwise
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0c10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Link_Knob(Knob)
     |  Link_Knob
     |  
     |  Method resolution order:
     |      Link_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getLink(...)
     |      getLink() -> s
     |  
     |  getLinkedKnob(...)
     |      getLinkedKnob() -> knob
     |  
     |  makeLink(...)
     |      makeLink(s, t) -> None
     |  
     |  setLink(...)
     |      setLink(s) -> None
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fafeb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class LookupCurves_Knob(Knob)
     |  LookupCurves_Knob
     |  
     |  Method resolution order:
     |      LookupCurves_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  addCurve(...)
     |      addCurve(a) -> None, add an AnimationCurve
     |      
     |      ,or addCurve(name, expr) -> None, add curve with name and expr
     |  
     |  delCurve(...)
     |      delCurve(a) -> None, removes an AnimationCurve
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0f90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Lut(object)
     |  Lut
     |  
     |  Methods defined here:
     |  
     |  fromByte(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromByteSingle(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromFloat(...)
     |      fromFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to from_byte(x*255).
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  isLinear(...)
     |      isLinear() -> True if toByte(x) appears to return x*255, False otherwise.
     |  
     |  isZero(...)
     |      isLinear() -> True if toByte(0) returns a value <= 0, False otherwise.
     |  
     |  toByte(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toByteSingle(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toFloat(...)
     |      toFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to to_byte(x)/255.
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbdb80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Menu(MenuItem)
     |  Menu
     |  
     |  Method resolution order:
     |      Menu
     |      MenuItem
     |      object
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MenuItem:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MenuBar(object)
     |  MenuBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
    
    class MenuItem(object)
     |  MenuItem
     |  
     |  Methods defined here:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MultiView_Knob(Knob)
     |  MultiView_Knob
     |  
     |  Method resolution order:
     |      MultiView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  toScriptPrefix(...)
     |  
     |  toScriptPrefixUserKnob(...)
     |  
     |  value(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Multiline_Eval_String_Knob(EvalString_Knob)
     |  Multiline_Eval_String_Knob
     |  
     |  Method resolution order:
     |      Multiline_Eval_String_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d3a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Node(object)
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16facf50>
    
    class NodeConstructor(object)
     |  NodeConstructor
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe260>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Nodes(object)
     |  Nodes
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe020>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Obsolete_Knob(Knob)
     |  Obsolete_Knob
     |  
     |  Method resolution order:
     |      Obsolete_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Knob:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class OneView_Knob(Enumeration_Knob)
     |  OneView_Knob
     |  
     |  Method resolution order:
     |      OneView_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc01d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class OutputContext(object)
     |  OutputContext
     |  
     |  Methods defined here:
     |  
     |  frame(...)
     |      frame() -> float
     |      
     |      Return frame value.
     |  
     |  setFrame(...)
     |      setFrame(f) -> True
     |      
     |      Set frame value. The f argument is a float.
     |  
     |  setView(...)
     |      setView(n) -> True
     |      
     |      Set view number. The n argument is an integer in the range of 0 to number of views.
     |  
     |  view(...)
     |      view() -> int
     |      
     |      Return view number.
     |  
     |  viewcount(...)
     |      viewcount() -> int
     |      
     |      Return number of views.
     |  
     |  viewname(...)
     |      viewname(n) -> string
     |      
     |      Return name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  viewshort(...)
     |      viewshort(n) -> string
     |      
     |      Return short name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb3470>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Panel(object)
     |  Panel
     |  
     |  Methods defined here:
     |  
     |  addBooleanCheckBox(...)
     |      Add a check box.
     |  
     |  addButton(...)
     |      Add a button to the panel.
     |  
     |  addClipnameSearch(...)
     |      Add a text line with a folder button to enter and search clipnames.
     |  
     |  addEnumerationPulldown(...)
     |      Add a pulldown menu.
     |  
     |  addExpressionInput(...)
     |      Add an expression evaluator.
     |  
     |  addFilenameSearch(...)
     |      Add a text line with a folder button to enter and search filenames.
     |  
     |  addMultilineTextInput(...)
     |      Add an editable multiline widget.
     |  
     |  addNotepad(...)
     |      Add a text edit widget.
     |  
     |  addRGBColorChip(...)
     |      Add a color chooser widget.
     |  
     |  addScriptCommand(...)
     |      Add a script command evaluator.
     |  
     |  addSingleLineInput(...)
     |      Add an editable single line widget.
     |  
     |  addTextFontPulldown(...)
     |      Add a font chooser.
     |  
     |  clear(...)
     |      Clear all panel attributes.
     |  
     |  execute(...)
     |      Execute script command associated to particular label. Return result as string.
     |  
     |  setTitle(...)
     |      Set title used for the panel.
     |  
     |  setWidth(...)
     |      Set width used for panel construction.
     |  
     |  show(...)
     |      Display panel.
     |  
     |  title(...)
     |      Return current title for the panel.
     |  
     |  value(...)
     |      Return value associated to a particular label.
     |  
     |  width(...)
     |      Return current width used for panel construction.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c540>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PanelNode(object)
     |  PanelNode
     |  
     |  Methods defined here:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  createWidget(...)
     |      Create the widget for the panel
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb99c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Precomp(Group)
     |  Method resolution order:
     |      Precomp
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  reload(...)
     |      reload() -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16faeab0>
    
    class ProgressTask(object)
     |  ProgressTask
     |  
     |  Methods defined here:
     |  
     |  isCancelled(...)
     |      isCancelled() -> True if the user has requested the task to be cancelled.
     |  
     |  setMessage(...)
     |      setMessage(s) -> None.
     |      
     |      set the message for the progress task
     |  
     |  setProgress(...)
     |      setProgress(i) -> None.
     |      
     |      i is an integer representing the current progress
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa11d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Pulldown_Knob(Enumeration_Knob)
     |  Pulldown_Knob
     |  
     |  Method resolution order:
     |      Pulldown_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  commands(...)
     |      commands(n) -> string
     |      
     |      Return command n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  itemName(...)
     |      itemName(n) -> string
     |      
     |      Return name of item n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values.
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.NoOp()
     |      >>> k = nuke.Pulldown_Knob('kname', 'klabel')
     |      >>> w.addKnob(k)
     |      >>> k = w['kname']>>> k.setValues({'label/command' : '3*2'})
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyCustom_Knob(Script_Knob)
     |  PyCustom_Knob
     |  
     |  Method resolution order:
     |      PyCustom_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9b30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyScript_Knob(Script_Knob)
     |  PyScript_Knob
     |  
     |  Method resolution order:
     |      PyScript_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed98e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PythonKnob(String_Knob)
     |  PythonKnob
     |  
     |  Method resolution order:
     |      PythonKnob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063330>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Range_Knob(Array_Knob)
     |  Range_Knob
     |  
     |  Method resolution order:
     |      Range_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0a10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Root(Group)
     |  Method resolution order:
     |      Root
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addView(...)
     |      addView(v) -> None.
     |  
     |  canSetInput(...)
     |  
     |  clones(...)
     |  
     |  connectInput(...)
     |  
     |  deleteView(...)
     |      deleteView(v) -> None.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |  
     |  fps(...)
     |      fps() -> int.
     |  
     |  input(...)
     |  
     |  inputs(...)
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |  
     |  maximumInputs(...)
     |  
     |  maximumOutputs(...)
     |  
     |  mergeFrameRange(...)
     |      mergeFrameRange() -> None.
     |  
     |  minimumInputs(...)
     |  
     |  modified(...)
     |      modified() -> True if root is modified, False otherwise.
     |  
     |  optionalInput(...)
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  setFrame(...)
     |      setFrame(v) -> None.
     |  
     |  setInput(...)
     |  
     |  setModified(...)
     |      setModified(v) -> None.
     |  
     |  setProxy(...)
     |      setProxy() -> None.
     |  
     |  setView(...)
     |      setView(v) -> None.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fae430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  channels = <built-in method channels of type object at 0x16fae430>
     |      channels() -> list.
     |  
     |  layers = <built-in method layers of type object at 0x16fae430>
     |      layers() -> list.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  running = <built-in method running of type object at 0x16fae430>
    
    class RunInMainThread(object)
     |  RunInMainThread
     |  
     |  Data and other attributes defined here:
     |  
     |  request = <built-in method request of type object at 0x16fb9f80>
     |  
     |  
     |  result = <built-in method result of type object at 0x16fb9f80>
    
    class Scale_Knob(Array_Knob)
     |  Scale_Knob
     |  
     |  Method resolution order:
     |      Scale_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f3a000>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Script_Knob(String_Knob)
     |  Script_Knob
     |  
     |  Method resolution order:
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9440>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class String_Knob(Knob)
     |  String_Knob
     |  
     |  Method resolution order:
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2950>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Tab_Knob(Knob)
     |  Tab_Knob
     |  
     |  Method resolution order:
     |      Tab_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38bb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Text_Knob(Knob)
     |  Text_Knob
     |  
     |  Method resolution order:
     |      Text_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39480>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ToolBar(object)
     |  ToolBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705cde0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Transform2d_Knob(Knob)
     |  Transform2d_Knob
     |  
     |  Method resolution order:
     |      Transform2d_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  value(...)
     |      value(oc) -> matrix
     |      
     |      Return transformation matrix. The argument oc is an OutputContext. Both arguments are optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2bd0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class UV_Knob(Array_Knob)
     |  UV_Knob
     |  
     |  Method resolution order:
     |      UV_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb17b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Undo(object)
     |  Undo
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb32c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  begin = <built-in method begin of type object at 0x16fb32c0>
     |      Begin a new user-visible group of undo actions.
     |  
     |  cancel = <built-in method cancel of type object at 0x16fb32c0>
     |      Undoes any actions recorded in the current set and throws it away.
     |  
     |  disable = <built-in method disable of type object at 0x16fb32c0>
     |      Prevent recording undos until matching enable()
     |  
     |  disabled = <built-in method disabled of type object at 0x16fb32c0>
     |      True if disable() has been called
     |  
     |  enable = <built-in method enable of type object at 0x16fb32c0>
     |      Undoes the previous disable()
     |  
     |  end = <built-in method end of type object at 0x16fb32c0>
     |      Complete current undo set and add it to the undo list.
     |  
     |  name = <built-in method name of type object at 0x16fb32c0>
     |      Name current undo set.
     |  
     |  new = <built-in method new of type object at 0x16fb32c0>
     |      Same as end();begin().
     |  
     |  redo = <built-in method redo of type object at 0x16fb32c0>
     |      Redoes 0'th redo.
     |  
     |  redoDescribe = <built-in method redoDescribe of type object at 0x16fb3...
     |      Return short description of redo n.
     |  
     |  redoDescribeFully = <built-in method redoDescribeFully of type object ...
     |      Return long description of redo n.
     |  
     |  redoSize = <built-in method redoSize of type object at 0x16fb32c0>
     |      Number of redo's that can be done.
     |  
     |  redoTruncate = <built-in method redoTruncate of type object at 0x16fb3...
     |      Destroy any redo's greater or equal to n.
     |  
     |  undo = <built-in method undo of type object at 0x16fb32c0>
     |      Undoes 0'th undo.
     |  
     |  undoDescribe = <built-in method undoDescribe of type object at 0x16fb3...
     |      Return short description of undo n.
     |  
     |  undoDescribeFully = <built-in method undoDescribeFully of type object ...
     |      Return long description of undo n.
     |  
     |  undoSize = <built-in method undoSize of type object at 0x16fb32c0>
     |      Number of undo's that can be done.
     |  
     |  undoTruncate = <built-in method undoTruncate of type object at 0x16fb3...
     |      Destroy any undo's greater or equal to n.
    
    class Unsigned_Knob(Array_Knob)
     |  Unsigned_Knob
     |  
     |  Method resolution order:
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class View(object)
     |  View
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  string(...)
     |      string() -> string
     |      
     |      Return name of view.
     |  
     |  value(...)
     |      value() -> int
     |      
     |      Return value of view.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2e20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ViewView_Knob(Knob)
     |  ViewView_Knob
     |  
     |  Method resolution order:
     |      ViewView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc08d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ViewerProcess(object)
     |  ViewerProcess
     |  
     |  Data and other attributes defined here:
     |  
     |  node = <built-in method node of type object at 0x16fba2f0>
     |      node(name, viewer) -> Node
     |      Returns the ViewerProcess with name 'name' and beloging to viewer 'viewer'.
     |      Default is to return the current selected ViewerProcess node.
     |  
     |  register = <built-in method register of type object at 0x16fba2f0>
     |      register(name, call, args, kwargs) -> None
     |      Register a ViewerProcess using menu name 'name' and callable 'call' with args 'args' 
     |      and optional named arguments 'kwargs'.
     |  
     |  unregister = <built-in method unregister of type object at 0x16fba2f0>
     |      unregister(name) -> None
     |      Unregister a ViewerProcess using menu name 'name'.
    
    class ViewerWindow(object)
     |  ViewerWindow
     |  
     |  Methods defined here:
     |  
     |  activateInput(...)
     |      activateInput(input, secondary=False) -> None.
     |      
     |      Sets the given viewer input to be active - i. e. show its image in the output window.
     |      Set the "secondary" parameter to True to activate as a secondary (wipe) input instead of primary.
     |      If the input is not connected, a ValueError exception is raised.
     |  
     |  activeInput(...)
     |      activeInput(secondary=False) -> int.
     |      
     |      Returns the currently active input of the viewer - i. e. the one with its image in the output window.
     |      By default it returns the primary input.  Set 'secondary' to True to return the secondary (wipe) input, if any.
     |      Note that the indices returned start from 0, though the viewer inputs are labelled starting with 1.
     |      It returns None if no input is active.
     |  
     |  frameControl(...)
     |      frameControl(i) -> True.
     |      
     |      i is an integer indicating viewer frame control 'button' to execute:
     |      
     |         -6 go to start
     |         -5 go to previous keyframe
     |         -4 step back by increment
     |         -3 go back previous keyframe or increment, whichever is closer
     |         -2 step back one frame
     |      
     |         -1 play reverse
     |          0 stop
     |         +1 play forward
     |      
     |         +2 step forward one frame
     |         +3 go to next keyframe or increment, whichever is closer
     |         +4 step forward by increment
     |         +5 go to next keyframe
     |         +6 go to end
     |  
     |  nextView(...)
     |      nextView() -> switch to next view in settings Views list.
     |  
     |  node(...)
     |      node() -> Node
     |      
     |      Returns the Viewer node currently associated with this window.
     |  
     |  play(...)
     |      Play forward (1) or reverse (0).
     |  
     |  previousView(...)
     |      previousView() -> switch to previous view in settings Views list.
     |  
     |  setView(...)
     |      setView(s) -> set 'current' multi-view view to 's'.
     |  
     |  stop(...)
     |      Stop playing.
     |  
     |  view(...)
     |      view() -> string name of 'current' multi-view view.
    
    class WH_Knob(Array_Knob)
     |  WH_Knob
     |  
     |  Method resolution order:
     |      WH_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'.
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  x_at(...)
     |      Return value for X position at time 't'.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  y_at(...)
     |      Return value for Y position at time 't'.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705bbe0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XYZ_Knob(Array_Knob)
     |  XYZ_Knob
     |  
     |  Method resolution order:
     |      XYZ_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  parent(...)
     |      parent() -> XYZ_Knob
     |      
     |      Return parent.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39b60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XY_Knob(Array_Knob)
     |  XY_Knob
     |  
     |  Method resolution order:
     |      XY_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbfd30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.

FUNCTIONS
    IrToken(...)
        Nuke internal. Not for public use.
    
    activeViewer(...)
        activeViewer()->viewer.
        
        Returns the currently-active viewer.
    
    addAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after each frame of a render
    
    addAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after any renders
    
    addAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node to produce the text to draw on it
        in the DAG. Any value other than None is converted to a string and used
        as the text. None indicates that previously-added functions should
        be tried
    
    addBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before each frame of a render
    
    addBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before starting any renders
    
    addFavoriteDir(...)
        addFavoriteDir(name, directory, type, icon, tooltip, key) -> None.
        
        This function adds an item to the file chooser's favorite directory list.
        The name argument is the favourite list entry label ('Home', 'Desktop', etc.); directory is the filesystem path; type is optional and can be a bitwise OR combination of any of the constants nuke.IMAGE, nuke.SCRIPT, nuke.FONT, nuke.GEO, and nuke.PYTHON; tooltip is optional and is a short text explanatory description that appears when the pointer hovers over the favorite item; and key is an optional argument to add a shortcut key.
        The path name can contain environment variables which will be expanded when the user clicks the favourite's button.
    
    addFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Add a function to modify filenames before Nuke passes them to
        the operating system. The first argument to the function is the
        filename, and it should return the new filename. None is the same as
        returning the string unchanged. All added functions are called
        in backwards order.
    
    addFormat(...)
        addFormat(s) -> Format if succeeded, None otherwise.
        
        s is a string argument: w h ?x y r t? ?pa? name
                w, h: required - width and height in pixels.
                x, y, r, t: optional - image area, if smaller than 0, 0, w, h.
                pa: optional - pixel aspect ratio.
                name: required - format name.
        Create a new image format, which will show up on the pull-down menus for image formats.
        You must give a width and height and name. The xyrt rectangle describes the image area,
        if it is smaller than the width and height (for Academy aperture, for example). The
        pixel aspect is the ratio of the width of a pixel to the height.
    
    addKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when the user changes a knob
        The knob is availble in nuke.thisKnob() and the node in nuke.thisNode().
        This is also called with dummy knobs when the control panel is opened
        or when the inputs to the node changes. The purpose is to update other
        knobs in the control panel. Use addUpdateUI() for changes that
        should happen even when the panel is closed.
    
    addOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is created or undeleted
    
    addOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is destroyed
    
    addOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is closed
    
    addOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute when a script is loaded
    
    addOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is saved
    
    addOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when user creates a node
    
    addUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node when things change. This is done
        during idle, you cannot rely on it being done before it starts updating
        the viewer
    
    addView(...)
        addView(s)->None.
        
        Adds a new view to the list of views.
    
    afterFrameRender()
    
    afterRender()
    
    allNodes(...)
        allNodes(filter, group) -> node list.
        
        Return a list of all the child nodes of the group. The filter and group arguments are optional. If the group is ommitted the current group (ie the group the user picked a menu item from the toolbar of) is used. Use the filter argument to return all nodes of a particular class. If you need to get all the nodes in the script from a context which has no child nodes, for instance a control panel, use nuke.root().nodes().
    
    animation(...)
        animation(object, command, ...) -> None.
        
        Does operations on an animation curve.
    
    animationEnd(...)
        animationEnd() -> float.
        
        Return last frame of animation.
    
    animationIncrement(...)
        animationIncrement() -> float.
        
        Returns a recommended interval between samples of the currently selected animation.
    
    animationStart(...)
        animationStart() -> float.
        
        Return first frame of animation.
    
    animations(...)
        animations() -> tuple.
        
        Returns a list of animatable things the user wants to work on.
    
    ask(...)
        Show a Yes/No dialog. Returns True if user hits Yes button. Returns False otherwise.
    
    autolabel()
    
    autoplace(...)
        autoplace(n) -> None.
        
        Automatically place nodes, so they do not overlap. The argument n is a node.
    
    autoplaceSnap(...)
        autoplaceSnap(n) -> None.
        
        Move a node to the closest grid position. The argument n is a node.
    
    beforeFrameRender()
    
    beforeRender()
    
    cacheUsage(...)
        cacheUsage()->int
        
        Returns the current memory usage.
    
    cancel(...)
        cancel() -> None.
        
        Same as hitting cancel on the progress panel.
    
    channels(...)
        channels(n) -> (string) 
        
        List channels. The n argument is a Nuke node and if given only the channels output by this node are listed.If not given or None, all channels known about are listed. Returns a string list.
    
    clearDiskCache(...)
        Delete all files in the disk cache
    
    clone(...)
        clone(node, args, inpanel) -> node.
        
        Create a clone node that behaves identical to the original. The node argument is the node to be cloned, args and inpanel are optional arguments similar to createNode.
        A cloned node shares the exact same properties with its original. Clones share the same set of knobs and the same control panel. However they can have different positions and connections in the render tree. Any clone, including the original, can be deleted at any time without harming any of its clones.
    
    cloneSelected(...)
        cloneSelected(action) -> True if succeeded, False otherwise.
        
        This makes a clone of all selected nodes, preserving connections between them, and makes only the clones be selected. The action argument is optional, and if "copy" it cuts the resulting clones to the clipboard.
    
    collapseToGroup(...)
        collapseToGroup(show)->Node.
        
        Moves the currently selected nodes to a new group, maintaining their previous connections.If show is True ( the default ), the node graph for the new group is shown in the background.
    
    connectNodes(...)
        connectNodes()->None.
    
    connectViewer(...)
        connectViewer(i, n) -> None.
        
        Connect a viewer input to a node. The argument i is the input number and n is either a Nuke node or None.
        Some viewer in the current group is found, if there are no viewers one is created. The viewer is then altered to have at least n+1 inputs and then input n is connected to the given node.This function is used by the numeric shortcuts in the DAG view menu.
    
    createNode(...)
        createNode(node, args, inpanel) -> node.
        
        Creates a node of the specified type and adds it to the DAG. The parameter node is a string and represents the node class (e.g. Blur), args is an optional string containing a TCL list of name value pairs (like "size 50 quality 19") and inpanel is an optional boolean indicating if the control panel for the new node should be opened (default is True; only applies when the GUI is running).
    
    defaultFontPathname(...)
        defaultFontPathname()->string.
        
        Returns the path to the default font.
    
    defaultNodeColor(...)
        defaultNodeColor(s)->unsigned int.
        
        Returns the default node colour. The argument s is the node class.
    
    delete(...)
        delete(n) -> None.
        
        Delete node. It can be recovered with an undo.
    
    deleteView(...)
        deleteView(s)->None.
        
        Deletes a view from the list of views.
    
    dependencies(nodes, what=7)
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select the types of dependencies that are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          deps = nuke.dependencies([n2], nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS)
    
    dependentNodes(what=7, nodes=[])
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select what types of dependent nodes are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          ndeps = nuke.dependentNodes(nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS, [n1])
    
    display(...)
        display(s, o, t, w) -> None.
        
        Creates a dialog box showing the result of a script. The s argument is a python script, o is a Nuke node that provides the "context" of execution, t is an optional argument to set the window title and w is an optional argument for a preferred window width.
        Creates a window showing the result of command. The command is executed in the "context" of the given node, so this and a knob name in expressions refer to that node. In the window is an "update" button which causes the command to be run again.
    
    endGroup(...)
        endGroup() -> None.
        
        Changes the current group to the parent of the current group.
        Does nothing if the current group is a Root (the main window of a script).
    
    execute(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    executeInMainThread(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and return immediately.
    
    executeInMainThreadWithResult(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and wait for the result to become available.
    
    executeMultiple(...)
        executeMultiple((nodes), (ranges), (views)) -> None.
        
        executeMultiple((nodes), FrameRanges, (views)) -> None.
        
        Execute the specified nodes over the given frame range. The argument nodes is a sequence of Nuke nodes and ranges is a sequence of range lists. The named nodes must all be Write or other executable operators.
        A Nuke range list is a sequence of 3 integers - first, last and incr ( e.g. nuke.execute((w,), ((1,100,1),)) ). Alternatively, you can supply a FrameRanges object.
        
        If no nodes are given then all executable nodes in the current group are executed. If Nuke is run with the GUI up, this will pop up a progress meter. If the user hits the cancel button this command will raise a "cancelled" error. If Nuke is run in terminal mode (with the -t switch) this prints a text percentage as it progresses. If the user types ^C (on Unix) this command will raise a "cancelled" error.
    
    exists(...)
        Returns true if the named knob or node exists.
    
    expandSelectedGroup(...)
        expandSelectedGroup() -> node list.
        
        Moves all nodes from the currently selected group node into its parent group, maintaining node input and output connections, and deletes the group.
        Returns the nodes that were moved, which will also be selected.
    
    expr(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    expression(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    extractSelected(...)
        extractSelected()->None.
        
        Disconnects the selected nodes in the group from the tree, and shifts them to the side.
    
    filename(...)
        filename(node, replace) -> string.
        
        Return the filename(s) this node or group is working with. The node and replace arguments are optional.
         If replace is specified as nuke.REPLACE, all %%04d style sequences will be replaced with the current frame number. If no filenames are found, None is returned.
    
    filenameFilter(filename)
    
    forceClone(...)
        forceClone() -> True if succeeded, False otherwise.
    
    formats(...)
        formats()->list of formats.
        
        Returns a list of all available formats.
    
    frame(...)
        frame(i) -> int.
        
        Return or set the current frame number.
        Returns the current frame. Normally this is the frame number set in the root node, typically by the user moving the frame slider in a viewer. If a number is given, it sets the current frame number to that number. If the current context is the root this changes the root frame.
    
    fromNode(...)
        fromNode(n) -> s.
        
        Returns the node as a string. The argument n is a Nuke node.
        This function is most useful when combining Python and TCL scripts for backwards compatibility reasons.
    
    getClipname(...)
        getClipname(prompt, pattern = None, default = None, multiple = False) -> string or list of strings naming clips or None.
        
        Raise a file chooser dialog where filenames that only differ by an index number are compressed into a single entry called a 'clip'.
                prompt -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                multiple -> False for a single selection, True to allow multiple clips to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getColor(...)
        getColor(initial) -> int
        
        Raise a simple color chooser dialog and return the user-selected value.
        The format of the color values is packed 8bit rgb multiplied by 256 (ie in binary: 0xRRGGBB00).
    
    getFilename(...)
        getFilename(message, pattern = None, default = None, favorites = None, type = None, multiple = False) -> string or list of strings naming clips or None.
        
        Pops up a file chooser dialog and returns user input.
                message -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                favorites -> restrict favorites to this set: 'image', 'script', or 'font'
                type -> the type of browser, to define task-specific behaviors; currently only 'save' is recognised
                multiple -> False to require a single selection, True to allow multiple filenames to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getFramesAndViews(...)
        Pops up a box that lets the user select a frame range and a selection of views.
    
    getInput(...)
        Pops up a box that lets the user type in an arbitrary string.
    
    hotkeys(...)
        hotkeys() -> string 
        
        Returns the Nuke key assignments as a string formatted for use in nuke.display().
    
    inputs(...)
        inputs(node, number) -> int.
        
        Get how many inputs the node has. The argument node is a Nuke node and the optional argument number is the number of inputs requested.
        Normally this is a constant but some nodes have a variable number, the user can keep connecting them and the count will increase.
        Attempting to set the number will just disconnect all inputs greater or equal to number. For a variable input node this may decrease inputs to the new value. For most nodes this will have no effect on the value of inputs.
    
    invertSelection(...)
        invertSelection()->None.
        
        Selects all unselected nodes, and deselects all selected ones.
    
    knob(...)
        Nuke internal. Not for public use.
    
    knobChanged()
    
    knobDefault(...)
        knobDefault sets a default value for knobs in nodes that belong to the same class. All knobs with matching names, that are created after this command was issued, will default to the new value. If class is missing or is "*." then this default applies to all nodes with such a knob. If several values are supplied, the first value which is valid will be used as the default.
    
    layers(...)
        layers(node) -> string list.
        
        Lists layers. The node argument is optional.
    
    load(...)
        Loads a plugin. Returns True if successful.
    
    makeGroup(...)
        makeGroup(show)->Node.
        
        Creates a group from the currently selected nodes.If show is True ( the default ), the node graph for the new group is shown.
    
    memory(...)
        Get/set information about memory usage.
    
    menu(...)
        menu(name)->menu.
        
        Find and return the Menu object with the given name. Current valid menus are:
        
          'Nuke'          the application menu
          'Pane'          the UI Panes & Panels menu
          'Nodes'         the Nodes toolbar (and Nodegraph right mouse menu)
          'Properties'    the Properties panel right mouse menu
          'Animation'     the knob Animation menu and Curve Editor right mouse menu
          'Viewer'        the Viewer right mouse menu
          'Node Graph'    the Node Graph right mouse menu
        A RuntimeException is thrown if not in GUI mode.
    
    message(...)
        Show an info dialog box. Pops up an info box (with a 'i' and the text message) and waits for the user to hit the OK button.
    
    modified(...)
        modified(b) -> True if modified, False otherwise.
        
        Get or set the 'modified' flag in a script. The optional argument b is a boolean.
        Setting the value will turn the indicator in the title bar on/off and will start or stop the autosave timeout. If no argument is provided this returns the current modified state.
    
    nodeCopy(...)
        nodeCopy(s).
        
        Copy all selected nodes into a file or the clipboard. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    nodeDelete(...)
        nodeDelete(s) -> True if any nodes were selected, False otherwise.
        
        Removes all selected nodes from the DAG.
    
    nodePaste(...)
        nodePaste(s) -> node.
        
        Paste nodes from a script file or the clipboard.
        This function executes the script stored in a file. It is assumed the script is the result of a nodeCopy command. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    numvalue(...)
        numvalue(knob, default) -> float.
        
        The numvalue function returns the current value of a knob.
        This is the same as the value() command except it will always return a number. For enumerations this returns the index into the menu, starting at zero. For checkmarks this returns 0 for false and 1 for true.
    
    oculaPresent(...)
        Return true if Ocula is present.
    
    ofxMenu(...)
        ofxMenu(s) -> string.
        
        Find all the OFX plugins (by searching all the directories below $OFX_PLUGIN_PATH, or by reading a cache file stored in $NUKE_TEMP_DIR), then add a menu item for each of them to the main menu.
    
    ofxPluginPath(...)
        Returns a list of all the directories Nuke searched for OFX plugins in.
    
    onCreate()
    
    onDestroy()
    
    onScriptClose()
    
    onScriptLoad()
    
    onScriptSave()
    
    onUserCreate()
    
    output_redirector(...)
        Internal to Nuke. Not for public use.
    
    pluginAddPath(args, addToSysPath=True)
        Adds all the paths to the beginning of the Nuke plugin path.
        If the path already exists in the list of plugin paths, it is moved
        to the start. If this command is executed inside an init.py then
        the init.py in the path will be executed.
        It also adds the paths to the sys.path, if addToSysPath is True.
    
    pluginAppendPath(args, addToSysPath=True)
        Add a filepath to the end of the Nuke plugin path.  If the path
        already exists in the list of plugin paths, it will remain at its
        current position.
        It also appends the paths to the sys.path, if addToSysPath is True.
    
    pluginExists(...)
        Returns True if the given plugin exists in the plugin path, or False if not.
    
    pluginPath(...)
        Returns a list of all the directories Nuke will search for plugins in.
    
    plugins(...)
        plugins(switches, pattern)->list of plugin names
        
        Returns a list of every loaded plugin or every plugin available. By default each plugin is returned as the full pathname of the plugin file. You can give a glob-style matching pattern and only the plugins whose filenames (not path) match a glob pattern will be returned and you can give more than one glob pattern. You can also put options before the glob patterns. Currently supported:
        
          ALL    Return all plugins in each of the plugin_path() directories,
                 rather than only the currently loaded plugins.
        
          NODIR  Just put the filenames in the list, not the full path. There
                 may be duplicates.
        
        see also: load, pluginPath
    
    recentFile(...)
        Returns a filename from the recent-files list.
    
    redo(...)
        redo() -> None.
        
        Perform the most recent redo.
    
    removeAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeFavoriteDir(...)
        removeFavoriteDir(name, type) -> None.
        
        Remove a directory path from the favorites list. The name argument is the favourite path entry ('Home', 'Desktop', etc.) and type
        is an optional argument and is a bitwise OR combination of nuke.IMAGE, nuke.SCRIPT, nuke.FONT or nuke.GEO
    
    removeFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    render(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    restoreWindowLayout(...)
        restoreWindowLayout(i) -> None.
        
        Restores window layout.
    
    root(...)
        root() -> node 
        
        Return the DAG's root node. Always succeeds.
    
    runIn(...)
        Executes commands with a given node, knob, or curve object as the 'context'.This means that all names are evaluated relative to this object, and commands that modify 'this' node will modify the given one.
    
    sample(...)
        sample(n, c, x, y, dx, dy) -> float.
        
        Return pixel values from an image. The argument n is the node, the c argument 
        is a string with the channel name, the x and y arguments are the center of the area 
        to sample. The optional arguments dx and dy are the size of the area to sample.
    
    saveWindowLayout(...)
        saveWindowLayout(i)->int.
        
        Saves the current window layout. The optional argument i is an integer.
    
    scriptClear(...)
        Clears a Nuke script.
    
    scriptClose(...)
        Close the current script or group. Returns True if successful.
    
    scriptExit(...)
        Exit Nuke.
    
    scriptNew(...)
        Start a new script. Returns True if successful.
    
    scriptOpen(...)
        Opens a new script containing the contents of the named file.
    
    scriptReadFile(...)
        Read nodes from a file.
    
    scriptReadText(...)
        Read nodes from a string.
    
    scriptSave(...)
        scriptSave(filename = '')
        
        Saves the current script to the current file name. If there is no current file name and Nuke is running in GUI mode, the user is asked for a name using the file chooser.
        If a filename argument is provided, Nuke writes to that file without changing the script name in the project (use scriptSaveAs() if you want it to change).
    
    scriptSaveAs(...)
        scriptSaveAs(filename = '', overwrite = -1)
        
        Saves the current script with the given file name if supplied, or
        (in GUI mode) asks the user for one using the file chooser.
        Overwriting options are as below:
                True (1)  -> always overwrite
                False (0) -> never overwrite
                otherwise -> in GUI mode, ask the user; in terminal, same as False
    
    scriptSource(...)
        Same as scriptReadFile().
    
    selectAll(...)
        selectAll()->None.
        
        Selects all nodes in the DAG.
    
    selectConnectedNodes()
        Selects all nodes in the tree of the selected node.
    
    selectPattern(...)
        selectPattern()->None.
        
        Selects nodes according to a regular expression matching pattern, entered through an input dialog.
        The pattern can include wildcards ('?' and '*') as well as regular expressions.
        The expressions are checked against the node name, label, class, and associated file names.
    
    selectSimilar(...)
        selectSimilar(matchType)->None.
        
        Selects nodes that match a node in the current selection by either:
          nuke.MATCH_CLASS
          nuke.MATCH_LABEL
          nuke.MATCH_COLOR
    
    selectedNode(...)
        selectedNode() -> node.
        
        Returns the "node the user is thinking about".
        If several nodes are selected, this returns one of them. The one returned will be an "output" node in that no other selected nodes use that node as an input. If no nodes are selected, then if the last thing typed was a hotkey this returns the node the cursor is pointing at.If none, or the last event was not a hotkey, this produces a "No node selected" error.
    
    selectedNodes(...)
        selectedNodes(filter = None) -> node list.
        
        List all the selected nodes.
        Returns a list of all selected nodes in the current group. An attempt is made to return them in "useful" order where inputs are done before the final node, so commands applied to this list go from top-down. The argument filter instructs the algorithm to apply only to a specific class of nodes.
    
    show(...)
        show(n, forceFloat) -> None.
        
        Show the control panel of a node. The argument 'n' and 'forceFloat' are optional.
        If 'n' is not given the current node is used. The argument 'forceFloat' will open the window as a floating panel.
        Opens a window for each named node, as though the user double-clicked on them.  For normal operators this opens the control panel, for viewers it opens the viewer, for groups it opens the control panel.
    
    showDag(...)
        showDag(n) -> None.
        
        Show the tree view of a group node or opens a node control panel. The argument n is a node.
    
    showInfo(...)
        showInfo(node) -> string.
        
        Returns a long string of debugging information about each node and the operators it is currently managing. The node argument is optional.
    
    showSettings(...)
        showSettings() -> None.
        
        Show the settings of the current group.
    
    splayNodes(...)
        splayNodes() -> None.
    
    stderr_redirector(...)
        Internal to Nuke. Not for public use.
    
    tabClose(...)
        Close the active dock tab. Returns True if successful.
    
    tabNext(...)
        Make the next tabe in this dock active. Returns True if successful.
    
    tcl(...)
        tcl(command, arg, arg, ...) -> string.
        
        Run a tcl command. The arguments must be strings and passed to the command. If no arguments are given and the command has whitespace in it then it is instead interpreted as a tcl program (this is depreciated)
    
    thisClass(...)
        thisClass()->string.
        
        Same as thisNode().Class() but faster.
    
    thisGroup(...)
        thisGroup()->Group.
        
        Returns the current context Group node.
    
    thisKnob(...)
        thisKnob()->Knob.
        
        Returns the current context knob or None.
    
    thisNode(...)
        thisNode()->Node.
        
        Returns the current context node.
    
    thisPane(...)
        thisPane()->Pane.
        
        Returns the active pane. This is only valid during a pane menu callback or window layout restoration.
    
    thisParent(...)
        thisParent() -> Node.
        
        Returns the current context Node parent.
    
    toNode(...)
        toNode(s) -> node or None if doesn't exist.
        
        s is a string argument. Return a node in the DAG as a Python object.
    
    toggleFullscreen(...)
        toggleFullscreen() -> None.
        
        Toggles between windowed and fullscreen mode.
    
    toggleViewers(...)
        toggleAllViewers() -> None.
        
        Toggles all the viewers on and off.
    
    toolbar(...)
        toolbar(name, create)->ToolBar or None.
        
        Find and return the ToolBar object with the given name. The name of the built-in nodes toolbar is 'Nodes'.
        If the named ToolBar is not found and create is True, it will be created.
        If the named ToolBar is not found and create is False, None is returned.
        A RuntimeException is thrown if not in GUI mode.
    
    tprint(...)
        tprint(value, ..., sep=' ', end='\n', file=sys.stdout)
        
        Prints the values to a stream, or to sys.stdout by default.
        Optional keyword arguments:
        file: a file-like object (stream); defaults to the current sys.stdout.
        sep:  string inserted between values, default a space.
        end:  string appended after the last value, default a newline.
    
    undo(...)
        undo() -> None.
        
        Perform the most recent undo.
    
    updateUI()
    
    value(...)
        value(knob, default) -> string.
        
        The value function returns the current value of a knob. The knob argument is a string referring to a knob and default is an optional default value to be returned in case of an error. Unlike knob(), this will evaluate animation at the current frame, and expand brackets and dollar signs in string knobs.
    
    views(...)
        views() -> list of nodes.
        
        Return a list of all the globally existing views.
    
    zoom(...)
        zoom(scale, (center_x, center_y), group) -> double.
        
        Change the zoom and pan of a group's display. The scale argument is the new zoom factor. The (center_x, center_y) and group arguments are optional.
        If the group name is omitted then the current group is used. (Not yet implemented.)
        If the scale is given, but not the center, the zoom is set to the provided scale and the view is positioned so the cursor is pointing at the same place it was before zooming. A zero or negative scale value will cause a zoom-to-fit.
        If both scale and center arguments are given, the view is zoomed and then centered on the specified point.
        The new scale factor will be returned, or None if the function is run in a non-GUI context.

DATA
    AFTER_CONST = 21
    AFTER_LINEAR = 22
    ALL = 1
    BEFORE_CONST = 19
    BEFORE_LINEAR = 20
    BREAK = 18
    CONSTANT = 1
    CUBIC = 4
    DISABLED = 128
    ENDLINE = 8192
    EXE_PATH = '/method/cg/opt/Nuke6.0v4/Nuke6.0'
    EXPRESSIONS = 1
    FLOAT = 5
    FONT = 4
    GEO = 16
    GUI = True
    HIDDEN_INPUTS = 4
    HORIZONTAL = 17
    IMAGE = 1
    INPUTS = 2
    INT16 = 3
    INT8 = 2
    INTERACTIVE = True
    INVISIBLE = 1024
    LINEAR = 3
    LOG = 4
    MATCH_CLASS = 0
    MATCH_COLOR = 2
    MATCH_LABEL = 1
    MONITOR = 0
    NODIR = 2
    NO_ANIMATION = 256
    NO_POSTAGESTAMPS = False
    NO_UNDO = 524288
    NUKE_VERSION_DATE = 'Apr  8 2010'
    NUKE_VERSION_MAJOR = 6
    NUKE_VERSION_MINOR = 0
    NUKE_VERSION_PHASE = ''
    NUKE_VERSION_PHASENUMBER = 0
    NUKE_VERSION_RELEASE = 4
    NUKE_VERSION_STRING = '6.0v4'
    NUM_CPUS = 16
    NUM_INTERPOLATIONS = 5
    PLUGIN_EXT = 'so'
    PREPEND = 8
    PYTHON = 32
    REPLACE = 1
    SCRIPT = 2
    SMOOTH = 0
    STARTLINE = 4096
    TABBEGINCLOSEDGROUP = 2
    TABBEGINGROUP = 1
    TABENDGROUP = -1
    TABKNOB = 0
    THREADS = 16
    TO_SCRIPT = 1
    USER_SET_SLOPE = 16
    VIEWER = 1
    WRITE_ALL = 8
    WRITE_NON_DEFAULT_ONLY = 16
    WRITE_USER_KNOB_DEFS = 4
    __all__ = ['AColor_Knob', 'AFTER_CONST', 'AFTER_LINEAR', 'ALL', 'Anima...
    afterFrameRenders = {}
    afterRenders = {}
    autolabels = {'*': [(<function autolabel at 0x17262848>, (), {})]}
    beforeFrameRenders = {}
    beforeRenders = {}
    env = {'64bit': True, 'ExecutablePath': '/method/cg/op...True, 'numCPU...
    filenameFilters = {}
    knobChangeds = {}
    nodes = <Nodes object at 0x16f7c090>
    onCreates = {}
    onDestroys = {}
    onScriptCloses = {}
    onScriptLoads = {}
    onScriptSaves = {}
    onUserCreates = {}
    untitled = 'Untitled'
    updateUIs = {}


for i in nuke.selectedNode():
    nuke.Class()
# Result: Traceback (most recent call last):
  File "<string>", line 1, in <module>
TypeError: 'Node' object is not iterable
for i in nuke.selectedNode():
    print n.name()
# Result: Traceback (most recent call last):
  File "<string>", line 1, in <module>
TypeError: 'Node' object is not iterable
for n in nuke.selectedNodes():
    print n.name()
# Result: Blur1
RotoPaint1
nuke.createNode("NoOp");
# Result: <NoOp1 at 0x16f7f1d0>
n = nuke.createNode("NoOp");
tab = nuke.Tab_Knob("Look","Camera Aim")
n.addKnob(tab)
# Result: n = nuke.createNode("NoOp");
tab = nuke.Tab_Knob("control","vrs")
n.addKnob(tab)
# Result: n = nuke.Panel("TEST")
n. addSingleLineInput('Name:', jobName)
# Result: Traceback (most recent call last):
  File "<string>", line 2, in <module>
NameError: name 'jobName' is not defined
n = nuke.Panel("TEST")
n. addSingleLineInput('Name:', "nuke.knob('root.name')")
# Result: n = nuke.Panel("TEST")
n. addSingleLineInput('Name:', "nuke.knob('root.name')")
n.show()
# Result: n = nuke.Panel("TEST")
n.print("TEST\n")
n. addSingleLineInput('Name:', "nuke.knob('root.name')")
n.show()
# Result:   File "<string>", line 2
    n.print("TEST\n")
          ^
SyntaxError: invalid syntax
n = nuke.Panel("TEST")
#n.("TEST\n")
n.addSingleLineInput('Name:', "nuke.knob('root.name')")
n.show()
# Result: # this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = selectedNodes()
a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 5, in <module>
NameError: name 'selectedNodes' is not defined
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = selectedNodes()
a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 5, in <module>
NameError: name 'selectedNodes' is not defined
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = nuke.selectedNodes()
a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 6, in <module>
TypeError: 'Panel' object is unsubscriptable
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = nuke.selectedNodes()
a = sn['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 6, in <module>
TypeError: list indices must be integers
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = nuke.selectedNodes()
for n in sn:
    a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 7, in <module>
NameError: knob file does not exist
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = nuke.selectedNodes()
for n in sn:
    a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('channels:', a)
n.show()
# Result: # this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

sn = nuke.selectedNodes()
for n in sn:
    a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('filename replace this:', a)
n.addSingleLineInput('with',b)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 11, in <module>
NameError: name 'b' is not defined
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

origFileName = ""
replacementFileName = ""
sn = nuke.selectedNodes()

#for n in sn:
#   a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('filename replace this:', origFileName)
n.addSingleLineInput('with',b)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 14, in <module>
NameError: name 'b' is not defined
# this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

origFileName = ""
replacementFileName = ""
sn = nuke.selectedNodes()

#for n in sn:
#   a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('filename replace this:', origFileName)
n.addSingleLineInput('with',replacementFileName)
n.show()
# Result: # this script creates a panel that enables the user to manipulate
# several knobs inside all selected read and write nodes
# you can select all nodes but it is going to change values only on reads and writes

origFileName = ""
replacementFileName = ""
sn = nuke.selectedNodes()

#for n in sn:
#   a = n['file'].value()

n = nuke.Panel("TEST")
n.addSingleLineInput('filename replace this:', origFileName)
n.addSingleLineInput('with',replacementFileName)
n.show()
# Result: Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/tools/release/nuke/scripts/python/collect.py", line 46, in collectFootage
    raise RuntimeError(this_filename+"\ncollectFootage() : Please save Nuke script before using.")
RuntimeError: /tools/release/nuke/scripts/python/collect.py
collectFootage() : Please save Nuke script before using.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/tools/release/nuke/menu/menu.py", line 59, in runSetshotTool
    import methodSetShotDlg
  File "/tools/release/maya/scripts/py/methodSetShotDlg.py", line 15, in <module>
    from PyQt4 import QtCore, QtGui
ImportError: No module named PyQt4
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ValueError: no node selected
help(nuke)
# Result: Help on package nuke:

NAME
    nuke - This module provides all the Nuke-specific functions and Classes.

FILE
    /method/cg/opt/Nuke6.0v4/plugins/nuke/__init__.py

PACKAGE CONTENTS
    callbacks
    executeInMain
    overrides
    rotopaint
    utils

CLASSES
    __builtin__.object
        __builtin__.AnimationCurve
        __builtin__.AnimationKey
        __builtin__.Box
        __builtin__.Format
        __builtin__.FrameRange
        __builtin__.FrameRanges
        __builtin__.GlobalsEnvironment
        __builtin__.Info
        __builtin__.Knob
            __builtin__.Array_Knob
                __builtin__.BBox_Knob
                __builtin__.Boolean_Knob
                __builtin__.Box3_Knob
                __builtin__.Color_Knob
                    __builtin__.AColor_Knob
                        __builtin__.Eyedropper_Knob
                __builtin__.Double_Knob
                __builtin__.IArray_Knob
                __builtin__.Int_Knob
                __builtin__.Keyer_Knob
                __builtin__.Range_Knob
                __builtin__.Scale_Knob
                __builtin__.UV_Knob
                __builtin__.Unsigned_Knob
                    __builtin__.ColorChip_Knob
                    __builtin__.Enumeration_Knob
                        __builtin__.Bitmask_Knob
                        __builtin__.OneView_Knob
                        __builtin__.Pulldown_Knob
                __builtin__.WH_Knob
                __builtin__.XYZ_Knob
                __builtin__.XY_Knob
            __builtin__.Axis_Knob
            __builtin__.BeginTabGroup_Knob
            __builtin__.Channel_Knob
                __builtin__.ChannelMask_Knob
            __builtin__.EndTabGroup_Knob
            __builtin__.Font_Knob
            __builtin__.Format_Knob
            __builtin__.Help_Knob
            __builtin__.Histogram_Knob
            __builtin__.Link_Knob
            __builtin__.LookupCurves_Knob
            __builtin__.MultiView_Knob
            __builtin__.Obsolete_Knob
            __builtin__.String_Knob
                __builtin__.EvalString_Knob
                    __builtin__.File_Knob
                    __builtin__.Multiline_Eval_String_Knob
                __builtin__.PythonKnob
                __builtin__.Script_Knob
                    __builtin__.PyCustom_Knob
                    __builtin__.PyScript_Knob
            __builtin__.Tab_Knob
            __builtin__.Text_Knob
            __builtin__.Transform2d_Knob
            __builtin__.ViewView_Knob
        __builtin__.Layer
        __builtin__.Lut
        __builtin__.MenuBar
        __builtin__.MenuItem
            __builtin__.Menu
        __builtin__.Node
            __builtin__.Group
                __builtin__.Gizmo
                __builtin__.Precomp
                __builtin__.Root
        __builtin__.NodeConstructor
        __builtin__.Nodes
        __builtin__.OutputContext
        __builtin__.Panel
        __builtin__.PanelNode
        __builtin__.ProgressTask
        __builtin__.RunInMainThread
        __builtin__.ToolBar
        __builtin__.Undo
        __builtin__.View
        __builtin__.ViewerProcess
        __builtin__.ViewerWindow
        nuke.utils.FnPySingleton
    
    class AColor_Knob(Color_Knob)
     |  AColor_Knob
     |  
     |  Method resolution order:
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc18d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class AnimationCurve(object)
     |  AnimationCurve
     |  
     |  Methods defined here:
     |  
     |  addKey(...)
     |      addKey([keys]) -> None.
     |      
     |      Insert a sequence of keys.
     |  
     |  changeInterpolation(...)
     |      changeInterpolation(keys, type) -> None.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Delete all keys.
     |  
     |  constant(...)
     |      constant() -> True if the animation appears to be a horizontal line, is a simple number, 
     |      or it is the default and all the points are at the same y value and have 0 slopes. False otherwise.
     |  
     |  derivative(...)
     |      derivative(t, n) -> float.
     |      
     |      Return the n'th derivative at time 't'.
     |  
     |  evaluate(...)
     |      evaluate(t) -> float.
     |      
     |      Return the value of the animation at time 't'.
     |  
     |  expression(...)
     |      expression() -> string.
     |  
     |  fixSlopes(...)
     |      fixSlopes(s) -> None.
     |  
     |  fromScript(...)
     |      fromScript(s) -> None.
     |  
     |  identity(...)
     |      identity() -> True if the animation appears to be such that y == x everywhere. This is True only for an expression of 'x' or the
     |      default expression and all points having y == x and slope == 1. Extrapolation is ignored.
     |  
     |  integrate(...)
     |      integrate(t1, t2) -> float.
     |      
     |      Return the area underneath the curve from t1 to t2.
     |  
     |  inverse(...)
     |      inverse(y) -> float.
     |      
     |      The inverse function at value y. This is the value of x such that evaluate(x) returns y.This is designed to invert color lookup tables. It only works if the derivative is zero or positive everywhere.
     |  
     |  keys(...)
     |      keys() -> [].
     |      
     |      List of keys.
     |  
     |  knob(...)
     |      knob() -> Knob.
     |      
     |      Return knob this animation belongs to.
     |  
     |  knobAndFieldName(...)
     |      knobAndFieldName() -> string.
     |      
     |      Return knob and field name combined (e.g. 'translate.x').
     |  
     |  knobIndex(...)
     |      knobIndex() -> int.
     |      
     |      Return the knob index this animation belongs to.
     |  
     |  noExpression(...)
     |      noExpression() -> True if the expression is the default expression (i.e. the keys control the curve), False otherwise.
     |  
     |  removeKey(...)
     |      removeKey([key]) -> None.
     |      
     |      Remove sequence of keys from the AnimationCurve.
     |  
     |  selected(...)
     |      identity() -> True if selected, False otherwise.
     |  
     |  setExpression(...)
     |      setExpression(s) -> None.
     |  
     |  setKey(...)
     |      setKey(t, y) -> Key.
     |      
     |      Set a key at time t and value y. If there is no key there one is created. If there is a key there it is moved
     |      vertically to be at y.  If a new key is inserted the interpolation and extrapolation are copied from a neighboring key,
     |      if there were no keys then it is set to nuke.SMOOTH interpolation and nuke.CONSTANT extrapolation.
     |  
     |  size(...)
     |      size() -> int.
     |      
     |      Number of keys.
     |  
     |  toScript(...)
     |      toScript(selected=False) -> string.
     |      
     |      Pass True for selected to only return selected curves.
     |  
     |  view(...)
     |      view() -> string.
     |      
     |      The view this AnimationCurve object is associated with.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0880>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class AnimationKey(object)
     |  AnimationKey
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  extrapolation
     |      Controls how to set the left slope of the first point and the right slope of the last point
     |  
     |  interpolation
     |      Used to calculate all the slopes except for the left slope of the first key and the right slope of the last key
     |  
     |  la
     |      The left 'bicubic' value
     |  
     |  lslope
     |      The derivative to the left of the point
     |  
     |  ra
     |      The right 'bicubic' value
     |  
     |  rslope
     |      The derivative to the right of the point
     |  
     |  selected
     |      True if the point is selected in the curve editor
     |  
     |  x
     |      The horizontal position of the point
     |  
     |  y
     |      The vertical position of the point
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa02c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Array_Knob(Knob)
     |  Array_Knob
     |  
     |  Method resolution order:
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ee45f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Axis_Knob(Knob)
     |  Axis_Knob
     |  
     |  Method resolution order:
     |      Axis_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  pivot(...)
     |      pivot() -> XYZ_Knob
     |      
     |      Return pivot knob.
     |  
     |  rotate(...)
     |      rotate() -> XYZ_Knob
     |      
     |      Return rotation knob.
     |  
     |  scale(...)
     |      scale() -> Scale_Knob
     |      
     |      Return scale knob.
     |  
     |  skew(...)
     |      skew() -> XYZ_Knob
     |      
     |      Return skew knob.
     |  
     |  translate(...)
     |      translate() -> XYZ_Knob
     |      
     |      Return translation knob.
     |  
     |  uniformScale(...)
     |      uniformScale() -> Double_Knob
     |      
     |      Return uniform scale knob.
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f396c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BBox_Knob(Array_Knob)
     |  BBox_Knob
     |  
     |  Method resolution order:
     |      BBox_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b4b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class BeginTabGroup_Knob(Knob)
     |  BeginTabGroup_Knob
     |  
     |  Method resolution order:
     |      BeginTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38e10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Bitmask_Knob(Enumeration_Knob)
     |  Bitmask_Knob
     |  
     |  Method resolution order:
     |      Bitmask_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1100>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Boolean_Knob(Array_Knob)
     |  Boolean_Knob
     |  
     |  Method resolution order:
     |      Boolean_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705ad90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Box(object)
     |  Box
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  centerX(...)
     |      centerX() -> float
     |      
     |      Return center in X.
     |  
     |  centerY(...)
     |      centerY() -> float
     |      
     |      Return height in Y.
     |  
     |  clampX(...)
     |      clampX(x) -> int.
     |      
     |      Return x restricted to pointing at a pixel in the box.
     |  
     |  clampY(...)
     |      clampY(y) -> int.
     |      
     |      Return y restricted to pointing at a pixel in the box.
     |  
     |  clear(...)
     |      clear() -> None.
     |      
     |      Set to is_constant().
     |  
     |  h(...)
     |      h() -> int
     |      
     |      Return height.
     |  
     |  intersect(...)
     |      intersect(x, y, r, t) -> None.
     |      
     |      Intersect with the given edges.
     |  
     |  isConstant(...)
     |      isConstant() -> True if box is 1x1 in both directions, False otherwise.
     |  
     |  merge(...)
     |      merge(x, y, r, t) -> None.
     |      
     |      Merge with the given edges.
     |  
     |  move(...)
     |      move(dx, dy) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  pad(...)
     |      pad(dx, dy, dr, dt) -> None.
     |      
     |      Move all the sides and thus the entire box by the given deltas.
     |  
     |  r(...)
     |      r() -> int
     |      
     |      Return right edge.
     |  
     |  set(...)
     |      set(x, y, r, t) -> None
     |      
     |      Set all values at once.
     |  
     |  setH(...)
     |      setH(n) -> None
     |      
     |      Set height by moving top edge.
     |  
     |  setR(...)
     |      setR(n) -> None
     |      
     |      Set right edge.
     |  
     |  setT(...)
     |      setT(n) -> None
     |      
     |      Set top edge.
     |  
     |  setW(...)
     |      setW(n) -> None
     |      
     |      Set width by moving right edge.
     |  
     |  setX(...)
     |      setX(n) -> None
     |      
     |      Set left edge.
     |  
     |  setY(...)
     |      setY(n) -> None
     |      
     |      Set bottom edge.
     |  
     |  t(...)
     |      t() -> int
     |      
     |      Return top edge.
     |  
     |  w(...)
     |      w() -> int
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> int
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> int
     |      
     |      Return bottom edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb46a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Box3_Knob(Array_Knob)
     |  Box3_Knob
     |  
     |  Method resolution order:
     |      Box3_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  f(...)
     |      Return value for F extent.
     |  
     |  n(...)
     |      Return value for N position.
     |  
     |  names(...)
     |      Return name for dimension 'i'
     |  
     |  r(...)
     |      Return value for R extent.
     |  
     |  setF(...)
     |      Set value for F extent.
     |  
     |  setN(...)
     |      Set value for N position.
     |  
     |  setR(...)
     |      Set value for R extent.
     |  
     |  setT(...)
     |      Set value for T extent.
     |  
     |  setX(...)
     |      Set value for X position.
     |  
     |  setY(...)
     |      Set value for Y position.
     |  
     |  t(...)
     |      Return value for T extent.
     |  
     |  value(...)
     |      Return value for dimension 'i'
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0350>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ChannelMask_Knob(Channel_Knob)
     |  ChannelMask_Knob
     |  
     |  Method resolution order:
     |      ChannelMask_Knob
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f384c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Channel_Knob:
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Channel_Knob(Knob)
     |  Channel_Knob
     |  
     |  Method resolution order:
     |      Channel_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  channelSelector(...)
     |  
     |  checkMarks(...)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Return channel depth.
     |  
     |  enableChannel(...)
     |      enableChannel(n, b) -> None
     |      
     |      Enable/Disable channel n. The b argument is a boolean.
     |  
     |  inputKnob(...)
     |  
     |  inputNumber(...)
     |  
     |  isChannelEnabled(...)
     |      isChannelEnabled(n) -> True if enabled, False otherwise
     |      
     |      Test if a channel is enabled.
     |  
     |  layerSelector(...)
     |  
     |  setEnable(...)
     |      setEnable(n) -> None
     |      
     |      Enable channel n.
     |  
     |  setInput(...)
     |  
     |  setValue(...)
     |      setValue(s) -> None.
     |      
     |      The s argument is a string - name of channel.
     |  
     |  value(...)
     |      value(n) -> float
     |      
     |      Return value of knob. The n argument is optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed8f80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ColorChip_Knob(Unsigned_Knob)
     |  ColorChip_Knob
     |  
     |  Method resolution order:
     |      ColorChip_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2780>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unsigned_Knob:
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Color_Knob(Array_Knob)
     |  Color_Knob
     |  
     |  Method resolution order:
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1680>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Double_Knob(Array_Knob)
     |  Double_Knob
     |  
     |  Method resolution order:
     |      Double_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705b970>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EndTabGroup_Knob(Knob)
     |  EndTabGroup_Knob
     |  
     |  Method resolution order:
     |      EndTabGroup_Knob
     |      Knob
     |      object
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Enumeration_Knob(Unsigned_Knob)
     |  Enumeration_Knob
     |  
     |  Method resolution order:
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38710>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class EvalString_Knob(String_Knob)
     |  EvalString_Knob
     |  
     |  Method resolution order:
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d110>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Eyedropper_Knob(AColor_Knob)
     |  Eyedropper_Knob
     |  
     |  Method resolution order:
     |      Eyedropper_Knob
     |      AColor_Knob
     |      Color_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc1ae0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Color_Knob:
     |  
     |  inputNumber(...)
     |      inputNumber() -> int
     |      
     |      Return input number.
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class File_Knob(EvalString_Knob)
     |  File_Knob
     |  
     |  Method resolution order:
     |      File_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      Set value of knob from a string.
     |  
     |  fromUserText(...)
     |      Set value of the knob from a string, parses frame range off the end and opens file to get set the format.
     |  
     |  getValue(...)
     |      Return value of knob.
     |  
     |  setValue(...)
     |      Set value of knob from a string.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063500>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FnPySingleton(__builtin__.object)
     |  Static methods defined here:
     |  
     |  __new__(type, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Font_Knob(Knob)
     |  Font_Knob
     |  
     |  Method resolution order:
     |      Font_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f392b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Format(object)
     |  Format
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  add(...)
     |      add(s) -> None
     |      
     |      Add this instance to a list of "named" formats.
     |  
     |  fromUV(...)
     |      fromUV(u, v) -> (x, y)
     |      
     |      Transform a UV coordinate in the range 0-1 into the format's XY range.
     |  
     |  height(...)
     |      height() -> int
     |      
     |      Return height of image file in pixels.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return user-visible name of format.
     |  
     |  pixelAspect(...)
     |      pixelAspect() -> float
     |      
     |      Return pixel aspect ratio.
     |  
     |  scaled(...)
     |      scaled(sx, sy, tx, ty) -> Format
     |      
     |      Scale and translate this format by sx, sy, tx and ty.
     |  
     |  setHeight(...)
     |      setHeight(n) -> None
     |      
     |      Set height of image file in pixels.
     |  
     |  setName(...)
     |      setName(s) -> None
     |      
     |      Set name of the format.
     |  
     |  setPixelAspect(...)
     |      setPixelAspect(n) -> None
     |      
     |      Set pixel aspect ratio.
     |  
     |  setWidth(...)
     |      setWidth(n) -> None
     |      
     |      Set width of image file in pixels.
     |  
     |  toUV(...)
     |      toUV(x, y) -> (u, v)
     |      
     |      Back-transform an XY coordinate in the format's space into UV space.
     |  
     |  width(...)
     |      width() -> int
     |      
     |      Return width of image file in pixels.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb48f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Format_Knob(Knob)
     |  Format_Knob
     |  
     |  Method resolution order:
     |      Format_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  actualValue(...)
     |      actualValue() -> Format.
     |      
     |      Return value of knob.
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  name(...)
     |      name() -> string.
     |      
     |      Return name of knob.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      setValue(format) -> True if succeeded, False otherwise.
     |      
     |      Set value of knob to format (either a Format object or a name of a format, e.g. "NTSC").
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  value(...)
     |      value() -> Format.
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0af0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class FrameRange(object)
     |  FrameRange
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  first(...)
     |      first() -> int
     |      
     |      return the first frame of the range.
     |  
     |  frames(...)
     |      frames() -> int
     |      
     |      return the numbers of frames defined in the range.
     |  
     |  getFrame(...)
     |      getFrame(n) -> int
     |      
     |      return the frame according to the index, parameter n must be between 0 and frames().
     |  
     |  increment(...)
     |      increment() -> int
     |      
     |      return the increment between two frames.
     |  
     |  isInRange(...)
     |      isInRange(n) -> int
     |      
     |      return if the frame is inside the range.
     |  
     |  last(...)
     |      last() -> int
     |      
     |      return the last frame of the range.
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      return the maximun frame define in the range.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      return the minimun frame define in the range.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  setFirst(...)
     |      setFirst(n) -> None
     |      
     |      set the first frame of the range.
     |  
     |  setIncrement(...)
     |      setIncrement(n) -> None
     |      
     |      set the increment between two frames.
     |  
     |  setLast(...)
     |      setLast(n) -> None
     |      
     |      set the last frame of the range.
     |  
     |  stepFrame(...)
     |      stepFrame() -> int
     |      
     |      return the absolute increment between two frames.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb4a80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class FrameRanges(object)
     |  FrameRanges
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  add(...)
     |      add(r) -> None
     |      
     |      add a new frame range.
     |  
     |  clear(...)
     |      clear() -> None
     |      
     |      reset all store frame ranges.
     |  
     |  compact(...)
     |      compact() -> None
     |      
     |      compact all the frame ranges.
     |  
     |  getRange(...)
     |      getRange()-> FrameRange
     |      
     |      return a range from the list
     |  
     |  maxFrame(...)
     |      maxFrame() -> int
     |      
     |      get maximun frame of all ranges.
     |  
     |  minFrame(...)
     |      minFrame() -> int
     |      
     |      get minimun frame of all ranges.
     |  
     |  next(...)
     |      x.next() -> the next value, or raise StopIteration
     |  
     |  size(...)
     |      size() -> int
     |      
     |      return the ranges number.
     |  
     |  toFrameList(...)
     |      toFrameList() -> [int]
     |      
     |      return a list of frames in a vector
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbd6e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Gizmo(Group)
     |  Method resolution order:
     |      Gizmo
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  command(...)
     |      command() -> string.
     |  
     |  filename(...)
     |      filename() -> string.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fae7d0>
    
    class GlobalsEnvironment(object)
     |  GlobalsEnvironment
     |  
     |  Methods defined here:
     |  
     |  __contains__(...)
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  get(...)
     |  
     |  has_key(...)
     |  
     |  items(...)
     |  
     |  keys(...)
     |  
     |  values(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1b20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Group(Node)
     |  Method resolution order:
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16fad290>
    
    class Help_Knob(Knob)
     |  Help_Knob
     |  
     |  Method resolution order:
     |      Help_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb07f0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Histogram_Knob(Knob)
     |  Histogram_Knob
     |  
     |  Method resolution order:
     |      Histogram_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb1430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class IArray_Knob(Array_Knob)
     |  IArray_Knob
     |  
     |  Method resolution order:
     |      IArray_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  dimensions(...)
     |      Return number of dimensions.
     |  
     |  height(...)
     |      Return height of the array.
     |  
     |  value(...)
     |      Return value of the array at position (x, y).
     |  
     |  width(...)
     |      Return width of the array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c080>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Info(object)
     |  Info
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  h(...)
     |      h() -> float
     |      
     |      Return height.
     |  
     |  w(...)
     |      w() -> float
     |      
     |      Return width.
     |  
     |  x(...)
     |      x() -> float
     |      
     |      Return left edge.
     |  
     |  y(...)
     |      y() -> float
     |      
     |      Return right edge.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fba650>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Int_Knob(Array_Knob)
     |  Int_Knob
     |  
     |  Method resolution order:
     |      Int_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef3c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Keyer_Knob(Array_Knob)
     |  Keyer_Knob
     |  
     |  Method resolution order:
     |      Keyer_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  highSoft(...)
     |  
     |  highTol(...)
     |  
     |  lowSoft(...)
     |  
     |  lowTol(...)
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name of argument n.
     |  
     |  value(...)
     |      value(oc, n) -> float
     |      
     |      Return value of argument n. The oc argument is an OutputContext.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc11e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Knob(object)
     |  Knob
     |  
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Layer(object)
     |  Layer
     |  
     |  Methods defined here:
     |  
     |  channels(...)
     |      channels() -> string list
     |  
     |  name(...)
     |      name() -> layer name
     |  
     |  setName(...)
     |      setName(n) -> None
     |  
     |  visible(...)
     |      visible() -> True if visible, False otherwise
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa0c10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Link_Knob(Knob)
     |  Link_Knob
     |  
     |  Method resolution order:
     |      Link_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getLink(...)
     |      getLink() -> s
     |  
     |  getLinkedKnob(...)
     |      getLinkedKnob() -> knob
     |  
     |  makeLink(...)
     |      makeLink(s, t) -> None
     |  
     |  setLink(...)
     |      setLink(s) -> None
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fafeb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class LookupCurves_Knob(Knob)
     |  LookupCurves_Knob
     |  
     |  Method resolution order:
     |      LookupCurves_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  addCurve(...)
     |      addCurve(a) -> None, add an AnimationCurve
     |      
     |      ,or addCurve(name, expr) -> None, add curve with name and expr
     |  
     |  delCurve(...)
     |      delCurve(a) -> None, removes an AnimationCurve
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0f90>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Lut(object)
     |  Lut
     |  
     |  Methods defined here:
     |  
     |  fromByte(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromByteSingle(...)
     |      fromByte(float) -> float.
     |      
     |      Converts byte values in the range 0-255 to floating point.
     |  
     |  fromFloat(...)
     |      fromFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to from_byte(x*255).
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  isLinear(...)
     |      isLinear() -> True if toByte(x) appears to return x*255, False otherwise.
     |  
     |  isZero(...)
     |      isLinear() -> True if toByte(0) returns a value <= 0, False otherwise.
     |  
     |  toByte(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toByteSingle(...)
     |      toByte(float) -> float.
     |      
     |      Converts floating point values to byte values in the range 0-255.
     |  
     |  toFloat(...)
     |      toFloat(src, alpha) -> float list.
     |      
     |      Convert a sequence of floating-point values to to_byte(x)/255.
     |      Alpha is an optional argument and if present unpremultiply by alpha, convert, and then multiply back.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbdb80>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Menu(MenuItem)
     |  Menu
     |  
     |  Method resolution order:
     |      Menu
     |      MenuItem
     |      object
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MenuItem:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MenuBar(object)
     |  MenuBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
    
    class MenuItem(object)
     |  MenuItem
     |  
     |  Methods defined here:
     |  
     |  setEnabled(...)
     |      setEnabled(boolean_value)
     |      
     |      Enable or disable the item.
    
    class MultiView_Knob(Knob)
     |  MultiView_Knob
     |  
     |  Method resolution order:
     |      MultiView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  fromScript(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  notDefault(...)
     |      notDefault() -> True if set to its default value, False otherwise.
     |  
     |  setValue(...)
     |      fromScript(s) -> True if succeeded, False otherwise.
     |      
     |      Initialise from script s.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  toScriptPrefix(...)
     |  
     |  toScriptPrefixUserKnob(...)
     |  
     |  value(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc0430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Multiline_Eval_String_Knob(EvalString_Knob)
     |  Multiline_Eval_String_Knob
     |  
     |  Method resolution order:
     |      Multiline_Eval_String_Knob
     |      EvalString_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f9d3a0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EvalString_Knob:
     |  
     |  evaluate(...)
     |      evaluate() -> string
     |      
     |      Perform substitutions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Node(object)
     |  Methods defined here:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __reduce_ex__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16facf50>
    
    class NodeConstructor(object)
     |  NodeConstructor
     |  
     |  Methods defined here:
     |  
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe260>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Nodes(object)
     |  Nodes
     |  
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbe020>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Obsolete_Knob(Knob)
     |  Obsolete_Knob
     |  
     |  Method resolution order:
     |      Obsolete_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Knob:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17064690>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class OneView_Knob(Enumeration_Knob)
     |  OneView_Knob
     |  
     |  Method resolution order:
     |      OneView_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc01d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValues(['exr'])
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Current value.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.value()
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class OutputContext(object)
     |  OutputContext
     |  
     |  Methods defined here:
     |  
     |  frame(...)
     |      frame() -> float
     |      
     |      Return frame value.
     |  
     |  setFrame(...)
     |      setFrame(f) -> True
     |      
     |      Set frame value. The f argument is a float.
     |  
     |  setView(...)
     |      setView(n) -> True
     |      
     |      Set view number. The n argument is an integer in the range of 0 to number of views.
     |  
     |  view(...)
     |      view() -> int
     |      
     |      Return view number.
     |  
     |  viewcount(...)
     |      viewcount() -> int
     |      
     |      Return number of views.
     |  
     |  viewname(...)
     |      viewname(n) -> string
     |      
     |      Return name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  viewshort(...)
     |      viewshort(n) -> string
     |      
     |      Return short name of the view. The n argument is an integer in the range of 0 to number of views.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb3470>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Panel(object)
     |  Panel
     |  
     |  Methods defined here:
     |  
     |  addBooleanCheckBox(...)
     |      Add a check box.
     |  
     |  addButton(...)
     |      Add a button to the panel.
     |  
     |  addClipnameSearch(...)
     |      Add a text line with a folder button to enter and search clipnames.
     |  
     |  addEnumerationPulldown(...)
     |      Add a pulldown menu.
     |  
     |  addExpressionInput(...)
     |      Add an expression evaluator.
     |  
     |  addFilenameSearch(...)
     |      Add a text line with a folder button to enter and search filenames.
     |  
     |  addMultilineTextInput(...)
     |      Add an editable multiline widget.
     |  
     |  addNotepad(...)
     |      Add a text edit widget.
     |  
     |  addRGBColorChip(...)
     |      Add a color chooser widget.
     |  
     |  addScriptCommand(...)
     |      Add a script command evaluator.
     |  
     |  addSingleLineInput(...)
     |      Add an editable single line widget.
     |  
     |  addTextFontPulldown(...)
     |      Add a font chooser.
     |  
     |  clear(...)
     |      Clear all panel attributes.
     |  
     |  execute(...)
     |      Execute script command associated to particular label. Return result as string.
     |  
     |  setTitle(...)
     |      Set title used for the panel.
     |  
     |  setWidth(...)
     |      Set width used for panel construction.
     |  
     |  show(...)
     |      Display panel.
     |  
     |  title(...)
     |      Return current title for the panel.
     |  
     |  value(...)
     |      Return value associated to a particular label.
     |  
     |  width(...)
     |      Return current width used for panel construction.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705c540>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PanelNode(object)
     |  PanelNode
     |  
     |  Methods defined here:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  createWidget(...)
     |      Create the widget for the panel
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb99c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Precomp(Group)
     |  Method resolution order:
     |      Precomp
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  reload(...)
     |      reload() -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  canSetInput(...)
     |      canSetInput(i, node) -> True if input i can be connected to the output of 'node', False if not.
     |  
     |  channels(...)
     |      channels() -> string list.
     |      
     |      List channels output by this node.
     |  
     |  clones(...)
     |      Return number of clones.
     |  
     |  connectInput(...)
     |      connectInput(i, node) -> True if successfully connected, False otherwise
     |      
     |      Connect the output of 'node' to the i'th input or the next available unconnected input.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |      
     |      First frame in frame range for this node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  input(...)
     |      Return node connected to input 'i'.
     |  
     |  inputs(...)
     |      Return number of inputs.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |      
     |      Last frame in frame range for this node.
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  maximumInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maximumOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  minimumInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  optionalInput(...)
     |      Return number of the first optional input.
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setInput(...)
     |      setInput(i, node) -> True if canSetInput() returns true, or if the input is already correct, False otherwise
     |      
     |      Connect input i to the output of 'node' if canSetInput() returns True.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16facf50>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  running = <built-in method running of type object at 0x16faeab0>
    
    class ProgressTask(object)
     |  ProgressTask
     |  
     |  Methods defined here:
     |  
     |  isCancelled(...)
     |      isCancelled() -> True if the user has requested the task to be cancelled.
     |  
     |  setMessage(...)
     |      setMessage(s) -> None.
     |      
     |      set the message for the progress task
     |  
     |  setProgress(...)
     |      setProgress(i) -> None.
     |      
     |      i is an integer representing the current progress
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fa11d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Pulldown_Knob(Enumeration_Knob)
     |  Pulldown_Knob
     |  
     |  Method resolution order:
     |      Pulldown_Knob
     |      Enumeration_Knob
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  commands(...)
     |      commands(n) -> string
     |      
     |      Return command n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  itemName(...)
     |      itemName(n) -> string
     |      
     |      Return name of item n. The argument n is an integer and in the range of 0 and numValues.
     |  
     |  numValues(...)
     |      numValues() -> int
     |      
     |      Return number of values.
     |  
     |  setValues(...)
     |      setValues(s) -> None
     |      
     |      (Re)initialise knob to list 's'.
     |      >>> w = nuke.nodes.NoOp()
     |      >>> k = nuke.Pulldown_Knob('kname', 'klabel')
     |      >>> w.addKnob(k)
     |      >>> k = w['kname']>>> k.setValues({'label/command' : '3*2'})
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0c60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Enumeration_Knob:
     |  
     |  enumName(...)
     |      enumName(n) -> string
     |      
     |      Return name of enumeration n. The argument n is an integer and in the range of 0 and numValues. Deprecated.
     |  
     |  setValue(...)
     |      setValue(s) -> None
     |      
     |      Set value to string 's'.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.setValue('exr')
     |  
     |  values(...)
     |      value() -> list
     |      
     |      List of item values.
     |      >>> w = nuke.nodes.Write()
     |      >>> k = w['file_type']
     |      >>> k.values()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyCustom_Knob(Script_Knob)
     |  PyCustom_Knob
     |  
     |  Method resolution order:
     |      PyCustom_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9b30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PyScript_Knob(Script_Knob)
     |  PyScript_Knob
     |  
     |  Method resolution order:
     |      PyScript_Knob
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed98e0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Script_Knob:
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class PythonKnob(String_Knob)
     |  PythonKnob
     |  
     |  Method resolution order:
     |      PythonKnob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x17063330>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Range_Knob(Array_Knob)
     |  Range_Knob
     |  
     |  Method resolution order:
     |      Range_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb0a10>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Root(Group)
     |  Method resolution order:
     |      Root
     |      Group
     |      Node
     |      object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addView(...)
     |      addView(v) -> None.
     |  
     |  canSetInput(...)
     |  
     |  clones(...)
     |  
     |  connectInput(...)
     |  
     |  deleteView(...)
     |      deleteView(v) -> None.
     |  
     |  firstFrame(...)
     |      firstFrame() -> int.
     |  
     |  fps(...)
     |      fps() -> int.
     |  
     |  input(...)
     |  
     |  inputs(...)
     |  
     |  lastFrame(...)
     |      lastFrame() -> int.
     |  
     |  maximumInputs(...)
     |  
     |  maximumOutputs(...)
     |  
     |  mergeFrameRange(...)
     |      mergeFrameRange() -> None.
     |  
     |  minimumInputs(...)
     |  
     |  modified(...)
     |      modified() -> True if root is modified, False otherwise.
     |  
     |  optionalInput(...)
     |  
     |  proxy(...)
     |      proxy() -> True if proxy is enabled, False otherwise.
     |  
     |  setFrame(...)
     |      setFrame(v) -> None.
     |  
     |  setInput(...)
     |  
     |  setModified(...)
     |      setModified(v) -> None.
     |  
     |  setProxy(...)
     |      setProxy() -> None.
     |  
     |  setView(...)
     |      setView(v) -> None.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fae430>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  channels = <built-in method channels of type object at 0x16fae430>
     |      channels() -> list.
     |  
     |  layers = <built-in method layers of type object at 0x16fae430>
     |      layers() -> list.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Group:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __reduce_ex__(...)
     |  
     |  begin(...)
     |      begin() -> Group
     |      
     |      All python code will be executed in the context of this group.
     |  
     |  connectSelectedNodes(...)
     |  
     |  end(...)
     |      end() -> None
     |      
     |      All python code will be executed in the context of the group's parent.
     |  
     |  expand(...)
     |      expand() -> node list.
     |      
     |      Moves all nodes from the group node into its parent group, maintaining node input and output connections, and deletes the group.
     |      Returns the nodes that were moved, which will also be selected.
     |  
     |  node(...)
     |      node(s) -> Node
     |      
     |      Locate the node with name 's'.
     |  
     |  nodes(...)
     |      nodes() -> list of nodes
     |      
     |      Returns a list of all the nodes in the group.
     |  
     |  numNodes(...)
     |      numNodes() -> int
     |      
     |      Return the number of children in the group.
     |  
     |  output(...)
     |      output() -> node
     |      
     |      Output node of the group.
     |  
     |  run(...)
     |      run(s) -> True if succeeded, False otherwise
     |      
     |      The 's' argument is executed with the group as the 'context'. This means that all names are evaluated relative to this object.
     |  
     |  selectedNode(...)
     |      selectedNode() -> node
     |      
     |      Returns the node the user is most likely thinking about. This is the last node the user clicked on, if it is selected.  Otherwise it is an 'output' (one with no selected outputs) of the set of selected nodes. If no nodes are selected then None is returned.
     |  
     |  selectedNodes(...)
     |      selectedNodes() -> List of nodes
     |      
     |      List of all selected nodes.
     |  
     |  splaySelectedNodes(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class(...)
     |      Return class of the node.
     |  
     |  addKnob(...)
     |      addKnob(k) -> None
     |      
     |      Adds the knob k as a user knob.
     |  
     |  autoplace(...)
     |      autoplace() -> None.
     |      
     |      Automatically place nodes, so they do not overlap.
     |  
     |  bbox(...)
     |      bbox() -> [x,y,w,h].
     |      
     |      BBox of the node.
     |  
     |  dependencies(...)
     |      dependencies(what) -> NodeList.
     |      
     |      List all nodes referred to by this node. 'what' is an optional integer (see below).
     |      You can use the following constants or'ed together to select what types of dependencies are looked for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  dependent(...)
     |      dependent(what) -> NodeList.
     |      
     |      List all nodes that read information from this node.  'what' is an optional integer (see below).
     |      You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:
     |               nuke.EXPRESSIONS = expressions
     |               nuke.INPUTS = visible input pipes
     |               nuke.HIDDEN_INPUTS = hidden input pipes.
     |      The default is to look for all types of connections.
     |      
     |      Example:
     |      nuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )
     |  
     |  error(...)
     |      error() -> True if node is in error, False otherwise.
     |      
     |      Error state of the node.
     |  
     |  frameRange(...)
     |      frameRange() -> FrameRange.
     |      
     |      Frame range for this node.
     |  
     |  fullName(...)
     |      fullName() -> string
     |      
     |      Return fully-qualified name of node. The argument n is a node. Print the name of the node and any groups enclosing it in "group.group.name" form.
     |  
     |  getNumKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  height(...)
     |      height() -> int.
     |      
     |      Height of the node.
     |  
     |  help(...)
     |      help() -> string
     |      
     |      Return help for the node.
     |  
     |  isSelected(...)
     |      isSelected() -> True or False
     |      
     |      Returns the current selection state of the node.  This is the same as checking the 'selected' knob.
     |  
     |  knob(...)
     |      Return knob with name 's' or index 'i'.
     |  
     |  knobs(...)
     |      knobs() -> dict
     |      
     |      Returns a dictionary of (name, knob) pairs for all knobs.
     |      >>> b = nuke.nodes.Blur()
     |      >>> b.knobs()
     |  
     |  maxInputs(...)
     |      Return maximum number of inputs this node can have.
     |  
     |  maxOutputs(...)
     |      Read-only GUI control. 0 prevents an arrow from showing. 
     |      1 shows the output arrow only if no outputs are connected.
     |  
     |  metadata(...)
     |      metadata(key,time,view)
     |      
     |      Return the metadata item for key on this node at current output context, or at optional time and view. If key is not specified a dictionary containing all key/value pairs is returned. None is returned if key does not exist on this node.
     |  
     |  minInputs(...)
     |      Return minimum number of inputs this node can have.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Return name of the node.
     |  
     |  numKnobs(...)
     |      Return number of knobs in this node.
     |  
     |  readKnobs(...)
     |      readKnobs(s) -> True if succeded, False otherwise.
     |  
     |  redraw(...)
     |      Redraw node.
     |  
     |  removeKnob(...)
     |      removeKnob(k) -> None
     |      
     |      Remove the user knob k. Throws a ValueError exception if the knob k is not found on the node.
     |  
     |  sample(...)
     |      sample(c, x, y, dx, dy) -> float.
     |      
     |      Return pixel values from an image. The c argument 
     |      is a string with the channel name, the x and y arguments are the center of the area 
     |      to sample. The optional arguments dx and dy are the size of the area to sample.
     |      >>> c = nuke.nodes.CheckerBoard2()
     |      >>> n = nuke.nodes.Blur()
     |      >>> n.setInput(0, c)
     |      >>> n['size'].setValue(10)
     |      >>> n.sample('red', 100, 100)
     |  
     |  screenHeight(...)
     |      screenHeight() -> int.
     |      
     |      Height of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  screenWidth(...)
     |      screenWidth() -> int.
     |      
     |      Width of the node when displayed on screen in the DAG, at 1:1 zoom, in pixels.
     |  
     |  setName(...)
     |      setName(s, uncollide) -> None
     |      
     |      Set name of the node and resolve name collisions if optional named argument 'uncollide' is True.
     |  
     |  setSelected(...)
     |      setSelected(selected) -> None
     |      
     |      Set the selection state of the node.  This is the same as changing the 'selected' knob.
     |  
     |  setXYpos(...)
     |      Set XY position of this node in the DAG.
     |  
     |  setXpos(...)
     |      Set X position of this node in the DAG.
     |  
     |  setYpos(...)
     |      Set Y position of this node in the DAG.
     |  
     |  showInfo(...)
     |      showInfo(s) -> None
     |      
     |      Creates a dialog box showing the result of script s.
     |  
     |  shown(...)
     |      Return true if the properties panel is open
     |  
     |  width(...)
     |      width() -> int.
     |      
     |      Width of the node.
     |  
     |  writeKnobs(...)
     |      writeKnobs(i) -> string.
     |      Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple listof knob names. If it is on, it is an alternating list of knob namesand the output of to_script().
     |      Flags can be any of these or'd together:
     |      - nuke.TO_SCRIPT produces to_script(0) values
     |      - nuke.TO_VALUE produces to_script(context) values
     |      - nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false
     |      - nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs
     |      - nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos
     |  
     |  xpos(...)
     |      Return X position of this node in the DAG.
     |  
     |  ypos(...)
     |      Return Y position of this node in the DAG.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Node:
     |  
     |  running = <built-in method running of type object at 0x16fae430>
    
    class RunInMainThread(object)
     |  RunInMainThread
     |  
     |  Data and other attributes defined here:
     |  
     |  request = <built-in method request of type object at 0x16fb9f80>
     |  
     |  
     |  result = <built-in method result of type object at 0x16fb9f80>
    
    class Scale_Knob(Array_Knob)
     |  Scale_Knob
     |  
     |  Method resolution order:
     |      Scale_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f3a000>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Script_Knob(String_Knob)
     |  Script_Knob
     |  
     |  Method resolution order:
     |      Script_Knob
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  command(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  execute(...)
     |      execute() -> None
     |      
     |      Execute the script.
     |  
     |  setCommand(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  setValue(...)
     |      setCommand(s) -> None
     |      
     |      Set command.
     |  
     |  value(...)
     |      command() -> string
     |      
     |      Return command.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ed9440>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String_Knob:
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class String_Knob(Knob)
     |  String_Knob
     |  
     |  Method resolution order:
     |      String_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  getText(...)
     |      getText() -> string
     |      
     |      Return text associated with knob.
     |  
     |  setValue(...)
     |      setValue() -> None
     |      
     |      Set value of knob.
     |  
     |  value(...)
     |      value() -> string
     |      
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2950>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Tab_Knob(Knob)
     |  Tab_Knob
     |  
     |  Method resolution order:
     |      Tab_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f38bb0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Text_Knob(Knob)
     |  Text_Knob
     |  
     |  Method resolution order:
     |      Text_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |  
     |  value(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39480>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ToolBar(object)
     |  ToolBar
     |  
     |  Methods defined here:
     |  
     |  addCommand(...)
     |      addCommand(command) -> menu item
     |      
     |      Adds the command to this menu/toolbar.
     |      Returns the menu item that was created.
     |  
     |  addMenu(...)
     |      addMenu(name='MyMenu') -> menu
     |      
     |      Adds a submenu to this menu/toolbar.
     |      Returns the menu that was added.
     |  
     |  addSeparator(...)
     |      addSeparator() -> separator
     |      
     |      Adds a separator to this menu/toolbar.
     |      Returns the separator that was created.
     |  
     |  findItem(...)
     |      findItem(name) -> menu item
     |      
     |      Finds and returns a command or submenu inside this.
     |      Returns None if it can't find anything.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705cde0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Transform2d_Knob(Knob)
     |  Transform2d_Knob
     |  
     |  Method resolution order:
     |      Transform2d_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  value(...)
     |      value(oc) -> matrix
     |      
     |      Return transformation matrix. The argument oc is an OutputContext. Both arguments are optional.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2bd0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class UV_Knob(Array_Knob)
     |  UV_Knob
     |  
     |  Method resolution order:
     |      UV_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb17b0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class Undo(object)
     |  Undo
     |  
     |  Methods defined here:
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb32c0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  begin = <built-in method begin of type object at 0x16fb32c0>
     |      Begin a new user-visible group of undo actions.
     |  
     |  cancel = <built-in method cancel of type object at 0x16fb32c0>
     |      Undoes any actions recorded in the current set and throws it away.
     |  
     |  disable = <built-in method disable of type object at 0x16fb32c0>
     |      Prevent recording undos until matching enable()
     |  
     |  disabled = <built-in method disabled of type object at 0x16fb32c0>
     |      True if disable() has been called
     |  
     |  enable = <built-in method enable of type object at 0x16fb32c0>
     |      Undoes the previous disable()
     |  
     |  end = <built-in method end of type object at 0x16fb32c0>
     |      Complete current undo set and add it to the undo list.
     |  
     |  name = <built-in method name of type object at 0x16fb32c0>
     |      Name current undo set.
     |  
     |  new = <built-in method new of type object at 0x16fb32c0>
     |      Same as end();begin().
     |  
     |  redo = <built-in method redo of type object at 0x16fb32c0>
     |      Redoes 0'th redo.
     |  
     |  redoDescribe = <built-in method redoDescribe of type object at 0x16fb3...
     |      Return short description of redo n.
     |  
     |  redoDescribeFully = <built-in method redoDescribeFully of type object ...
     |      Return long description of redo n.
     |  
     |  redoSize = <built-in method redoSize of type object at 0x16fb32c0>
     |      Number of redo's that can be done.
     |  
     |  redoTruncate = <built-in method redoTruncate of type object at 0x16fb3...
     |      Destroy any redo's greater or equal to n.
     |  
     |  undo = <built-in method undo of type object at 0x16fb32c0>
     |      Undoes 0'th undo.
     |  
     |  undoDescribe = <built-in method undoDescribe of type object at 0x16fb3...
     |      Return short description of undo n.
     |  
     |  undoDescribeFully = <built-in method undoDescribeFully of type object ...
     |      Return long description of undo n.
     |  
     |  undoSize = <built-in method undoSize of type object at 0x16fb32c0>
     |      Number of undo's that can be done.
     |  
     |  undoTruncate = <built-in method undoTruncate of type object at 0x16fb3...
     |      Destroy any undo's greater or equal to n.
    
    class Unsigned_Knob(Array_Knob)
     |  Unsigned_Knob
     |  
     |  Method resolution order:
     |      Unsigned_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  setValue(...)
     |      Set value of knob.
     |  
     |  value(...)
     |      Return value of knob.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16ef2060>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class View(object)
     |  View
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  string(...)
     |      string() -> string
     |      
     |      Return name of view.
     |  
     |  value(...)
     |      value() -> int
     |      
     |      Return value of view.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fb2e20>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ViewView_Knob(Knob)
     |  ViewView_Knob
     |  
     |  Method resolution order:
     |      ViewView_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fc08d0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearAnimated(...)
     |      Clear animation for channel 'c'. Return True if successful.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  fromScript(...)
     |      Initialise from script.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' for channel 'c'.
     |  
     |  getIntegral(...)
     |      Return integral at the interval [t1, t2] for channel 'c'.
     |  
     |  getKeyIndex(...)
     |      Return keyframe index at time 't' for channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return index of the keyframe at time 't' for channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return nth derivative at time 't' for channel 'c'.
     |  
     |  getNumKeys(...)
     |      Return number of keyframes for channel 'c'.
     |  
     |  getValue(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  getValueAt(...)
     |      Return value at time 't' for channel 'c'.
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if there is a keyframe at the current frame for channel 'c'.
     |  
     |  isKeyAt(...)
     |      Return True if there is a keyframe at time 't' for channel 'c'.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  removeKey(...)
     |      Remove key for channel 'c'. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove key at time 't' for channel 'c'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Set channel 'c' to be animated.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at channel 'c'. Return True if successful.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setValue(...)
     |      Sets the value 'v' at channel 'c'. Return True if successful.
     |  
     |  setValueAt(...)
     |      Set value 'v' at time 't' and channel 'c'. Return True if successful.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  value(...)
     |      Return value at the current frame for channel 'c'.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class ViewerProcess(object)
     |  ViewerProcess
     |  
     |  Data and other attributes defined here:
     |  
     |  node = <built-in method node of type object at 0x16fba2f0>
     |      node(name, viewer) -> Node
     |      Returns the ViewerProcess with name 'name' and beloging to viewer 'viewer'.
     |      Default is to return the current selected ViewerProcess node.
     |  
     |  register = <built-in method register of type object at 0x16fba2f0>
     |      register(name, call, args, kwargs) -> None
     |      Register a ViewerProcess using menu name 'name' and callable 'call' with args 'args' 
     |      and optional named arguments 'kwargs'.
     |  
     |  unregister = <built-in method unregister of type object at 0x16fba2f0>
     |      unregister(name) -> None
     |      Unregister a ViewerProcess using menu name 'name'.
    
    class ViewerWindow(object)
     |  ViewerWindow
     |  
     |  Methods defined here:
     |  
     |  activateInput(...)
     |      activateInput(input, secondary=False) -> None.
     |      
     |      Sets the given viewer input to be active - i. e. show its image in the output window.
     |      Set the "secondary" parameter to True to activate as a secondary (wipe) input instead of primary.
     |      If the input is not connected, a ValueError exception is raised.
     |  
     |  activeInput(...)
     |      activeInput(secondary=False) -> int.
     |      
     |      Returns the currently active input of the viewer - i. e. the one with its image in the output window.
     |      By default it returns the primary input.  Set 'secondary' to True to return the secondary (wipe) input, if any.
     |      Note that the indices returned start from 0, though the viewer inputs are labelled starting with 1.
     |      It returns None if no input is active.
     |  
     |  frameControl(...)
     |      frameControl(i) -> True.
     |      
     |      i is an integer indicating viewer frame control 'button' to execute:
     |      
     |         -6 go to start
     |         -5 go to previous keyframe
     |         -4 step back by increment
     |         -3 go back previous keyframe or increment, whichever is closer
     |         -2 step back one frame
     |      
     |         -1 play reverse
     |          0 stop
     |         +1 play forward
     |      
     |         +2 step forward one frame
     |         +3 go to next keyframe or increment, whichever is closer
     |         +4 step forward by increment
     |         +5 go to next keyframe
     |         +6 go to end
     |  
     |  nextView(...)
     |      nextView() -> switch to next view in settings Views list.
     |  
     |  node(...)
     |      node() -> Node
     |      
     |      Returns the Viewer node currently associated with this window.
     |  
     |  play(...)
     |      Play forward (1) or reverse (0).
     |  
     |  previousView(...)
     |      previousView() -> switch to previous view in settings Views list.
     |  
     |  setView(...)
     |      setView(s) -> set 'current' multi-view view to 's'.
     |  
     |  stop(...)
     |      Stop playing.
     |  
     |  view(...)
     |      view() -> string name of 'current' multi-view view.
    
    class WH_Knob(Array_Knob)
     |  WH_Knob
     |  
     |  Method resolution order:
     |      WH_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      Return name for dimension 'i'.
     |  
     |  x(...)
     |      Return value for X position.
     |  
     |  x_at(...)
     |      Return value for X position at time 't'.
     |  
     |  y(...)
     |      Return value for Y position.
     |  
     |  y_at(...)
     |      Return value for Y position at time 't'.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x1705bbe0>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  value(...)
     |      Return value for this knob at index 'i'
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XYZ_Knob(Array_Knob)
     |  XYZ_Knob
     |  
     |  Method resolution order:
     |      XYZ_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  parent(...)
     |      parent() -> XYZ_Knob
     |      
     |      Return parent.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  z(...)
     |      z(oc) -> float
     |      
     |      Return value for z. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16f39b60>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.
    
    class XY_Knob(Array_Knob)
     |  XY_Knob
     |  
     |  Method resolution order:
     |      XY_Knob
     |      Array_Knob
     |      Knob
     |      object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
     |  
     |  names(...)
     |      names(n) -> string
     |      
     |      Return name for dimension n. The argument n is an integer.
     |  
     |  value(...)
     |      value(n, oc) -> float
     |      
     |      Return value for dimension n. The optional argument oc is an OutputContext.
     |  
     |  x(...)
     |      x(oc) -> float
     |      
     |      Return value for x. The optional oc argument is an OutputContext
     |  
     |  y(...)
     |      y(oc) -> float
     |      
     |      Return value for y. The optional oc argument is an OutputContext
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object at 0x16fbfd30>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Array_Knob:
     |  
     |  animation(...)
     |      animation(channel, view)->AnimationCurve.
     |      
     |      Return the AnimationCurve for the  channel 'channel' and view. The view argument is optional.
     |  
     |  animations(...)
     |      animations(view)->AnimationCurve list.
     |  
     |  array(...)
     |      Return list of knob values.
     |  
     |  arraySize(...)
     |      Return number of elements in the array.
     |  
     |  clearAnimated(...)
     |      Delete animation at channel 'c'. Return True if successful.
     |  
     |  copyAnimation(...)
     |      copyAnimation(channel, curve, view)->None.
     |      
     |      Copies the i'th channel of the AnimationCurve curve to this object. The view is optional and defaults to the current view.
     |  
     |  copyAnimations(...)
     |      copyAnimations(curves, view)->None.
     |      
     |      Copies the AnimationCurves from curves to this object. The view is optional and defaults to the current view.
     |  
     |  defaultValue(...)
     |      Return default value for this knob.
     |  
     |  deleteAnimation(...)
     |      deleteAnimation(curve)->None. Raises ValueError if not found.
     |      
     |      Deletes the AnimationCurve.
     |  
     |  dimensions(...)
     |      Return number of dimensions in the array.
     |  
     |  frame(...)
     |      Return current frame number.
     |  
     |  fromScript(...)
     |      Set value of the knob to a user defined script (TCL syntax). Return True if successful.
     |  
     |  getDerivative(...)
     |      Return derivative at time 't' and index 'i'.
     |  
     |  getIntegral(...)
     |      Return integral at time interval [t1, t2] and index 'i'.
     |  
     |  getKeyIndex(...)
     |      Return index of the keyframe at time 't' and channel 'c'.
     |  
     |  getKeyTime(...)
     |      Return time of the keyframe at time 't' and channel 'c'.
     |  
     |  getNthDerivative(...)
     |      Return n'th derivative at time 't' and index 'i'.
     |  
     |  getNumKeys(...)
     |      Return number of keys at channel 'c'.
     |  
     |  getValue(...)
     |      Return value for this knob at index 'i'
     |  
     |  getValueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  hasExpression(...)
     |      Return True if animation at index 'i' has an expression.
     |  
     |  height(...)
     |      Return height of the array of values.
     |  
     |  isAnimated(...)
     |      Return True if channel 'c' is animated.
     |  
     |  isKey(...)
     |      Return True if a key exists at the current frame and index 'i'.
     |  
     |  isKeyAt(...)
     |      Returns True if there is a keyframe at specified time, optional index and view, otherwise returns False.
     |  
     |  max(...)
     |      Return maximum value for this knob.
     |  
     |  maximum(...)
     |      Return maximum value for this knob.
     |  
     |  min(...)
     |      Return minimum value for this knob.
     |  
     |  minimum(...)
     |      Return minimum value for this knob.
     |  
     |  notDefault(...)
     |      Return True if any of the values is not set to the default.
     |  
     |  removeKey(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  removeKeyAt(...)
     |      Remove keyframe at specified time, optional index and view. Return True if successful.
     |  
     |  resize(...)
     |      Resize array to width 'w' and height 'h'. Return True if successful.
     |  
     |  setAnimated(...)
     |      Create an Animation object for channel 'c'. Return True if successful, in which case caller must initialize it by calling setValue() or setValueAt().
     |  
     |  setDefaultValue(...)
     |      Set default value for this knob.
     |  
     |  setExpression(...)
     |      Set expression in 'text' at row 'i'. Return True if successful.
     |  
     |  setKeyAt(...)
     |      setKey(time, index, view) -> None.
     |      
     |      Set a key on element 'index', at time and view.
     |  
     |  setRange(...)
     |      Set allowable range for this knob.
     |  
     |  setSingleValue(...)
     |      Set knob to just hold a single value or not.
     |  
     |  setValue(...)
     |      setValue(value, index, time, view) -> True if value changed, False otherwise.
     |      
     |      Set index to value at time and view.
     |  
     |  setValueAt(...)
     |      Set value of element 'index' at time for view. If the knob is animated, it will set a new keyframe or change an existing one. Index and view are optional. Return True if successful.
     |  
     |  singleValue(...)
     |      Return True if this knob just holds a single value.
     |  
     |  splitView(...)
     |      Split the view 'v' away from the current knob value
     |  
     |  toScript(...)
     |      toScript(quote, context=current) -> string.
     |      
     |      Return the value of the knob in script syntax.
     |      Pass True for quote to return results quoted in {}.
     |      Pass None for context to get results for all views and key times (as stored in a .nk file).
     |  
     |  unsplitView(...)
     |      Unsplit the view 'v' so that it shares a value with other views
     |  
     |  valueAt(...)
     |      Return value for this knob at specified time, optional index and view'
     |  
     |  vect(...)
     |      Return list of knob values.
     |  
     |  width(...)
     |      Return width of the array of values.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Knob:
     |  
     |  Class(...)
     |      Return class.
     |  
     |  clearFlag(...)
     |      clearFlag(f) -> None.
     |      
     |      Clear flag.
     |  
     |  enabled(...)
     |      enabled() -> Boolean.
     |      
     |      Return whether the knob is enabled or disabled.
     |  
     |  label(...)
     |      Return label.
     |  
     |  name(...)
     |      Return name.
     |  
     |  setEnabled(...)
     |      setEnabled( enabled ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  setFlag(...)
     |      setFlag(f) -> None.
     |      
     |      Logical OR of the argument and existing knob flags.
     |  
     |  setLabel(...)
     |      Set label.
     |  
     |  setName(...)
     |      Set name.
     |  
     |  setTooltip(...)
     |      Set tooltip.
     |  
     |  setVisible(...)
     |      setVisible( visible ) -> None.
     |      
     |      Enable or disable the knob.
     |  
     |  tooltip(...)
     |      Return tooltip.
     |  
     |  visible(...)
     |      visible() -> Boolean.
     |      
     |      Return whether the knob is visible.

FUNCTIONS
    IrToken(...)
        Nuke internal. Not for public use.
    
    activeViewer(...)
        activeViewer()->viewer.
        
        Returns the currently-active viewer.
    
    addAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after each frame of a render
    
    addAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute after any renders
    
    addAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node to produce the text to draw on it
        in the DAG. Any value other than None is converted to a string and used
        as the text. None indicates that previously-added functions should
        be tried
    
    addBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before each frame of a render
    
    addBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Add code to execute before starting any renders
    
    addFavoriteDir(...)
        addFavoriteDir(name, directory, type, icon, tooltip, key) -> None.
        
        This function adds an item to the file chooser's favorite directory list.
        The name argument is the favourite list entry label ('Home', 'Desktop', etc.); directory is the filesystem path; type is optional and can be a bitwise OR combination of any of the constants nuke.IMAGE, nuke.SCRIPT, nuke.FONT, nuke.GEO, and nuke.PYTHON; tooltip is optional and is a short text explanatory description that appears when the pointer hovers over the favorite item; and key is an optional argument to add a shortcut key.
        The path name can contain environment variables which will be expanded when the user clicks the favourite's button.
    
    addFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Add a function to modify filenames before Nuke passes them to
        the operating system. The first argument to the function is the
        filename, and it should return the new filename. None is the same as
        returning the string unchanged. All added functions are called
        in backwards order.
    
    addFormat(...)
        addFormat(s) -> Format if succeeded, None otherwise.
        
        s is a string argument: w h ?x y r t? ?pa? name
                w, h: required - width and height in pixels.
                x, y, r, t: optional - image area, if smaller than 0, 0, w, h.
                pa: optional - pixel aspect ratio.
                name: required - format name.
        Create a new image format, which will show up on the pull-down menus for image formats.
        You must give a width and height and name. The xyrt rectangle describes the image area,
        if it is smaller than the width and height (for Academy aperture, for example). The
        pixel aspect is the ratio of the width of a pixel to the height.
    
    addKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when the user changes a knob
        The knob is availble in nuke.thisKnob() and the node in nuke.thisNode().
        This is also called with dummy knobs when the control panel is opened
        or when the inputs to the node changes. The purpose is to update other
        knobs in the control panel. Use addUpdateUI() for changes that
        should happen even when the panel is closed.
    
    addOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is created or undeleted
    
    addOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when a node is destroyed
    
    addOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is closed
    
    addOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute when a script is loaded
    
    addOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Add code to execute before a script is saved
    
    addOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute when user creates a node
    
    addUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Add code to execute on every node when things change. This is done
        during idle, you cannot rely on it being done before it starts updating
        the viewer
    
    addView(...)
        addView(s)->None.
        
        Adds a new view to the list of views.
    
    afterFrameRender()
    
    afterRender()
    
    allNodes(...)
        allNodes(filter, group) -> node list.
        
        Return a list of all the child nodes of the group. The filter and group arguments are optional. If the group is ommitted the current group (ie the group the user picked a menu item from the toolbar of) is used. Use the filter argument to return all nodes of a particular class. If you need to get all the nodes in the script from a context which has no child nodes, for instance a control panel, use nuke.root().nodes().
    
    animation(...)
        animation(object, command, ...) -> None.
        
        Does operations on an animation curve.
    
    animationEnd(...)
        animationEnd() -> float.
        
        Return last frame of animation.
    
    animationIncrement(...)
        animationIncrement() -> float.
        
        Returns a recommended interval between samples of the currently selected animation.
    
    animationStart(...)
        animationStart() -> float.
        
        Return first frame of animation.
    
    animations(...)
        animations() -> tuple.
        
        Returns a list of animatable things the user wants to work on.
    
    ask(...)
        Show a Yes/No dialog. Returns True if user hits Yes button. Returns False otherwise.
    
    autolabel()
    
    autoplace(...)
        autoplace(n) -> None.
        
        Automatically place nodes, so they do not overlap. The argument n is a node.
    
    autoplaceSnap(...)
        autoplaceSnap(n) -> None.
        
        Move a node to the closest grid position. The argument n is a node.
    
    beforeFrameRender()
    
    beforeRender()
    
    cacheUsage(...)
        cacheUsage()->int
        
        Returns the current memory usage.
    
    cancel(...)
        cancel() -> None.
        
        Same as hitting cancel on the progress panel.
    
    channels(...)
        channels(n) -> (string) 
        
        List channels. The n argument is a Nuke node and if given only the channels output by this node are listed.If not given or None, all channels known about are listed. Returns a string list.
    
    clearDiskCache(...)
        Delete all files in the disk cache
    
    clone(...)
        clone(node, args, inpanel) -> node.
        
        Create a clone node that behaves identical to the original. The node argument is the node to be cloned, args and inpanel are optional arguments similar to createNode.
        A cloned node shares the exact same properties with its original. Clones share the same set of knobs and the same control panel. However they can have different positions and connections in the render tree. Any clone, including the original, can be deleted at any time without harming any of its clones.
    
    cloneSelected(...)
        cloneSelected(action) -> True if succeeded, False otherwise.
        
        This makes a clone of all selected nodes, preserving connections between them, and makes only the clones be selected. The action argument is optional, and if "copy" it cuts the resulting clones to the clipboard.
    
    collapseToGroup(...)
        collapseToGroup(show)->Node.
        
        Moves the currently selected nodes to a new group, maintaining their previous connections.If show is True ( the default ), the node graph for the new group is shown in the background.
    
    connectNodes(...)
        connectNodes()->None.
    
    connectViewer(...)
        connectViewer(i, n) -> None.
        
        Connect a viewer input to a node. The argument i is the input number and n is either a Nuke node or None.
        Some viewer in the current group is found, if there are no viewers one is created. The viewer is then altered to have at least n+1 inputs and then input n is connected to the given node.This function is used by the numeric shortcuts in the DAG view menu.
    
    createNode(...)
        createNode(node, args, inpanel) -> node.
        
        Creates a node of the specified type and adds it to the DAG. The parameter node is a string and represents the node class (e.g. Blur), args is an optional string containing a TCL list of name value pairs (like "size 50 quality 19") and inpanel is an optional boolean indicating if the control panel for the new node should be opened (default is True; only applies when the GUI is running).
    
    defaultFontPathname(...)
        defaultFontPathname()->string.
        
        Returns the path to the default font.
    
    defaultNodeColor(...)
        defaultNodeColor(s)->unsigned int.
        
        Returns the default node colour. The argument s is the node class.
    
    delete(...)
        delete(n) -> None.
        
        Delete node. It can be recovered with an undo.
    
    deleteView(...)
        deleteView(s)->None.
        
        Deletes a view from the list of views.
    
    dependencies(nodes, what=7)
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select the types of dependencies that are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          deps = nuke.dependencies([n2], nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS)
    
    dependentNodes(what=7, nodes=[])
        List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).
          You can use the following constants or'ed together to select what types of dependent nodes are looked for:
                 nuke.EXPRESSIONS = expressions
                 nuke.INPUTS = visible input pipes
                 nuke.HIDDEN_INPUTS = hidden input pipes.
          The default is to look for all types of connections.
          
        Example:
          n1 = nuke.nodes.Blur()
          n2 = nuke.nodes.Merge()
          n2.setInput(0, n1)
          ndeps = nuke.dependentNodes(nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS, [n1])
    
    display(...)
        display(s, o, t, w) -> None.
        
        Creates a dialog box showing the result of a script. The s argument is a python script, o is a Nuke node that provides the "context" of execution, t is an optional argument to set the window title and w is an optional argument for a preferred window width.
        Creates a window showing the result of command. The command is executed in the "context" of the given node, so this and a knob name in expressions refer to that node. In the window is an "update" button which causes the command to be run again.
    
    endGroup(...)
        endGroup() -> None.
        
        Changes the current group to the parent of the current group.
        Does nothing if the current group is a Root (the main window of a script).
    
    execute(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    executeInMainThread(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and return immediately.
    
    executeInMainThreadWithResult(call, args=(), kwargs={})
        Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i
        n
              Nuke's main thread and wait for the result to become available.
    
    executeMultiple(...)
        executeMultiple((nodes), (ranges), (views)) -> None.
        
        executeMultiple((nodes), FrameRanges, (views)) -> None.
        
        Execute the specified nodes over the given frame range. The argument nodes is a sequence of Nuke nodes and ranges is a sequence of range lists. The named nodes must all be Write or other executable operators.
        A Nuke range list is a sequence of 3 integers - first, last and incr ( e.g. nuke.execute((w,), ((1,100,1),)) ). Alternatively, you can supply a FrameRanges object.
        
        If no nodes are given then all executable nodes in the current group are executed. If Nuke is run with the GUI up, this will pop up a progress meter. If the user hits the cancel button this command will raise a "cancelled" error. If Nuke is run in terminal mode (with the -t switch) this prints a text percentage as it progresses. If the user types ^C (on Unix) this command will raise a "cancelled" error.
    
    exists(...)
        Returns true if the named knob or node exists.
    
    expandSelectedGroup(...)
        expandSelectedGroup() -> node list.
        
        Moves all nodes from the currently selected group node into its parent group, maintaining node input and output connections, and deletes the group.
        Returns the nodes that were moved, which will also be selected.
    
    expr(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    expression(...)
        expression(s) -> float.
        
        Parse a Nuke expression. The argument s is a string.
        This command runs the same expression parser as is used by animations. This is not the same as the tcl expr parser. The main differences are:   -# Only floating point numbers are calculated. There are no strings, boolean, or integer values.
                -# You can name any knob that returns a floating point value, with a dot-separated name, see knob for details on these names. You may follow the knob name with a time in parenthesis (like a function call) and if it is animated it will be evaluated at that time. If it is animated and no time is given, "frame" is used.
                -# The words "frame", "t", and "x" evaluate to the frame number of the context node, or the frame number this animation is being evaluated at.
                -# The word 'y' in an animation expression evaluates to the value the animation would have if the control points were used and there was no expression. Outside an animation expression y returns zero.
    
    extractSelected(...)
        extractSelected()->None.
        
        Disconnects the selected nodes in the group from the tree, and shifts them to the side.
    
    filename(...)
        filename(node, replace) -> string.
        
        Return the filename(s) this node or group is working with. The node and replace arguments are optional.
         If replace is specified as nuke.REPLACE, all %%04d style sequences will be replaced with the current frame number. If no filenames are found, None is returned.
    
    filenameFilter(filename)
    
    forceClone(...)
        forceClone() -> True if succeeded, False otherwise.
    
    formats(...)
        formats()->list of formats.
        
        Returns a list of all available formats.
    
    frame(...)
        frame(i) -> int.
        
        Return or set the current frame number.
        Returns the current frame. Normally this is the frame number set in the root node, typically by the user moving the frame slider in a viewer. If a number is given, it sets the current frame number to that number. If the current context is the root this changes the root frame.
    
    fromNode(...)
        fromNode(n) -> s.
        
        Returns the node as a string. The argument n is a Nuke node.
        This function is most useful when combining Python and TCL scripts for backwards compatibility reasons.
    
    getClipname(...)
        getClipname(prompt, pattern = None, default = None, multiple = False) -> string or list of strings naming clips or None.
        
        Raise a file chooser dialog where filenames that only differ by an index number are compressed into a single entry called a 'clip'.
                prompt -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                multiple -> False for a single selection, True to allow multiple clips to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getColor(...)
        getColor(initial) -> int
        
        Raise a simple color chooser dialog and return the user-selected value.
        The format of the color values is packed 8bit rgb multiplied by 256 (ie in binary: 0xRRGGBB00).
    
    getFilename(...)
        getFilename(message, pattern = None, default = None, favorites = None, type = None, multiple = False) -> string or list of strings naming clips or None.
        
        Pops up a file chooser dialog and returns user input.
                message -> present the user with this message
                pattern -> file selection pattern
                default  -> default filename and path
                favorites -> restrict favorites to this set: 'image', 'script', or 'font'
                type -> the type of browser, to define task-specific behaviors; currently only 'save' is recognised
                multiple -> False to require a single selection, True to allow multiple filenames to be selected
        
        Returns a list of clips when multiple is True, a single string if multiple is False, and None if the dialog is canceled.
    
    getFramesAndViews(...)
        Pops up a box that lets the user select a frame range and a selection of views.
    
    getInput(...)
        Pops up a box that lets the user type in an arbitrary string.
    
    hotkeys(...)
        hotkeys() -> string 
        
        Returns the Nuke key assignments as a string formatted for use in nuke.display().
    
    inputs(...)
        inputs(node, number) -> int.
        
        Get how many inputs the node has. The argument node is a Nuke node and the optional argument number is the number of inputs requested.
        Normally this is a constant but some nodes have a variable number, the user can keep connecting them and the count will increase.
        Attempting to set the number will just disconnect all inputs greater or equal to number. For a variable input node this may decrease inputs to the new value. For most nodes this will have no effect on the value of inputs.
    
    invertSelection(...)
        invertSelection()->None.
        
        Selects all unselected nodes, and deselects all selected ones.
    
    knob(...)
        Nuke internal. Not for public use.
    
    knobChanged()
    
    knobDefault(...)
        knobDefault sets a default value for knobs in nodes that belong to the same class. All knobs with matching names, that are created after this command was issued, will default to the new value. If class is missing or is "*." then this default applies to all nodes with such a knob. If several values are supplied, the first value which is valid will be used as the default.
    
    layers(...)
        layers(node) -> string list.
        
        Lists layers. The node argument is optional.
    
    load(...)
        Loads a plugin. Returns True if successful.
    
    makeGroup(...)
        makeGroup(show)->Node.
        
        Creates a group from the currently selected nodes.If show is True ( the default ), the node graph for the new group is shown.
    
    memory(...)
        Get/set information about memory usage.
    
    menu(...)
        menu(name)->menu.
        
        Find and return the Menu object with the given name. Current valid menus are:
        
          'Nuke'          the application menu
          'Pane'          the UI Panes & Panels menu
          'Nodes'         the Nodes toolbar (and Nodegraph right mouse menu)
          'Properties'    the Properties panel right mouse menu
          'Animation'     the knob Animation menu and Curve Editor right mouse menu
          'Viewer'        the Viewer right mouse menu
          'Node Graph'    the Node Graph right mouse menu
        A RuntimeException is thrown if not in GUI mode.
    
    message(...)
        Show an info dialog box. Pops up an info box (with a 'i' and the text message) and waits for the user to hit the OK button.
    
    modified(...)
        modified(b) -> True if modified, False otherwise.
        
        Get or set the 'modified' flag in a script. The optional argument b is a boolean.
        Setting the value will turn the indicator in the title bar on/off and will start or stop the autosave timeout. If no argument is provided this returns the current modified state.
    
    nodeCopy(...)
        nodeCopy(s).
        
        Copy all selected nodes into a file or the clipboard. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    nodeDelete(...)
        nodeDelete(s) -> True if any nodes were selected, False otherwise.
        
        Removes all selected nodes from the DAG.
    
    nodePaste(...)
        nodePaste(s) -> node.
        
        Paste nodes from a script file or the clipboard.
        This function executes the script stored in a file. It is assumed the script is the result of a nodeCopy command. The 's' argument can be "%clipboard%" to paste the operating system's clipboard contents.
    
    numvalue(...)
        numvalue(knob, default) -> float.
        
        The numvalue function returns the current value of a knob.
        This is the same as the value() command except it will always return a number. For enumerations this returns the index into the menu, starting at zero. For checkmarks this returns 0 for false and 1 for true.
    
    oculaPresent(...)
        Return true if Ocula is present.
    
    ofxMenu(...)
        ofxMenu(s) -> string.
        
        Find all the OFX plugins (by searching all the directories below $OFX_PLUGIN_PATH, or by reading a cache file stored in $NUKE_TEMP_DIR), then add a menu item for each of them to the main menu.
    
    ofxPluginPath(...)
        Returns a list of all the directories Nuke searched for OFX plugins in.
    
    onCreate()
    
    onDestroy()
    
    onScriptClose()
    
    onScriptLoad()
    
    onScriptSave()
    
    onUserCreate()
    
    output_redirector(...)
        Internal to Nuke. Not for public use.
    
    pluginAddPath(args, addToSysPath=True)
        Adds all the paths to the beginning of the Nuke plugin path.
        If the path already exists in the list of plugin paths, it is moved
        to the start. If this command is executed inside an init.py then
        the init.py in the path will be executed.
        It also adds the paths to the sys.path, if addToSysPath is True.
    
    pluginAppendPath(args, addToSysPath=True)
        Add a filepath to the end of the Nuke plugin path.  If the path
        already exists in the list of plugin paths, it will remain at its
        current position.
        It also appends the paths to the sys.path, if addToSysPath is True.
    
    pluginExists(...)
        Returns True if the given plugin exists in the plugin path, or False if not.
    
    pluginPath(...)
        Returns a list of all the directories Nuke will search for plugins in.
    
    plugins(...)
        plugins(switches, pattern)->list of plugin names
        
        Returns a list of every loaded plugin or every plugin available. By default each plugin is returned as the full pathname of the plugin file. You can give a glob-style matching pattern and only the plugins whose filenames (not path) match a glob pattern will be returned and you can give more than one glob pattern. You can also put options before the glob patterns. Currently supported:
        
          ALL    Return all plugins in each of the plugin_path() directories,
                 rather than only the currently loaded plugins.
        
          NODIR  Just put the filenames in the list, not the full path. There
                 may be duplicates.
        
        see also: load, pluginPath
    
    recentFile(...)
        Returns a filename from the recent-files list.
    
    redo(...)
        redo() -> None.
        
        Perform the most recent redo.
    
    removeAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAfterRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeAutolabel(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeBeforeRender(call, args=(), kwargs={}, nodeClass='Write')
        Remove a previously-added callback with the same arguments.
    
    removeFavoriteDir(...)
        removeFavoriteDir(name, type) -> None.
        
        Remove a directory path from the favorites list. The name argument is the favourite path entry ('Home', 'Desktop', etc.) and type
        is an optional argument and is a bitwise OR combination of nuke.IMAGE, nuke.SCRIPT, nuke.FONT or nuke.GEO
    
    removeFilenameFilter(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeKnobChanged(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnDestroy(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')
        Remove a previously-added callback with the same arguments.
    
    removeOnUserCreate(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    removeUpdateUI(call, args=(), kwargs={}, nodeClass='*')
        Remove a previously-added callback with the same arguments.
    
    render(...)
        execute(nameOrNode, start, end, incr, views) -> None.
        execute(nameOrNode, FrameRangeSet, views) -> None.
        
        Defaults:
          start:  root.first_frame (integer)
          end:    root.last_frame (integer)
          incr:   1 (integer)
          views:  None (list)
        
        The first argument, nameOrNode can be either a node object or the name of a node.
        Execute the named Write node over the specified frame range.
        If Nuke is run with the GUI up, this will pop up a progress meter. If the user hitsthe cancel button this command will raise a "cancelled" error.
        If Nuke is run from the nuke command line (ie nuke was started with the -t switch)execute() prints a text percentage as it progresses. If the user types ^C it will abort and raise a "cancelled" error.
    
    restoreWindowLayout(...)
        restoreWindowLayout(i) -> None.
        
        Restores window layout.
    
    root(...)
        root() -> node 
        
        Return the DAG's root node. Always succeeds.
    
    runIn(...)
        Executes commands with a given node, knob, or curve object as the 'context'.This means that all names are evaluated relative to this object, and commands that modify 'this' node will modify the given one.
    
    sample(...)
        sample(n, c, x, y, dx, dy) -> float.
        
        Return pixel values from an image. The argument n is the node, the c argument 
        is a string with the channel name, the x and y arguments are the center of the area 
        to sample. The optional arguments dx and dy are the size of the area to sample.
    
    saveWindowLayout(...)
        saveWindowLayout(i)->int.
        
        Saves the current window layout. The optional argument i is an integer.
    
    scriptClear(...)
        Clears a Nuke script.
    
    scriptClose(...)
        Close the current script or group. Returns True if successful.
    
    scriptExit(...)
        Exit Nuke.
    
    scriptNew(...)
        Start a new script. Returns True if successful.
    
    scriptOpen(...)
        Opens a new script containing the contents of the named file.
    
    scriptReadFile(...)
        Read nodes from a file.
    
    scriptReadText(...)
        Read nodes from a string.
    
    scriptSave(...)
        scriptSave(filename = '')
        
        Saves the current script to the current file name. If there is no current file name and Nuke is running in GUI mode, the user is asked for a name using the file chooser.
        If a filename argument is provided, Nuke writes to that file without changing the script name in the project (use scriptSaveAs() if you want it to change).
    
    scriptSaveAs(...)
        scriptSaveAs(filename = '', overwrite = -1)
        
        Saves the current script with the given file name if supplied, or
        (in GUI mode) asks the user for one using the file chooser.
        Overwriting options are as below:
                True (1)  -> always overwrite
                False (0) -> never overwrite
                otherwise -> in GUI mode, ask the user; in terminal, same as False
    
    scriptSource(...)
        Same as scriptReadFile().
    
    selectAll(...)
        selectAll()->None.
        
        Selects all nodes in the DAG.
    
    selectConnectedNodes()
        Selects all nodes in the tree of the selected node.
    
    selectPattern(...)
        selectPattern()->None.
        
        Selects nodes according to a regular expression matching pattern, entered through an input dialog.
        The pattern can include wildcards ('?' and '*') as well as regular expressions.
        The expressions are checked against the node name, label, class, and associated file names.
    
    selectSimilar(...)
        selectSimilar(matchType)->None.
        
        Selects nodes that match a node in the current selection by either:
          nuke.MATCH_CLASS
          nuke.MATCH_LABEL
          nuke.MATCH_COLOR
    
    selectedNode(...)
        selectedNode() -> node.
        
        Returns the "node the user is thinking about".
        If several nodes are selected, this returns one of them. The one returned will be an "output" node in that no other selected nodes use that node as an input. If no nodes are selected, then if the last thing typed was a hotkey this returns the node the cursor is pointing at.If none, or the last event was not a hotkey, this produces a "No node selected" error.
    
    selectedNodes(...)
        selectedNodes(filter = None) -> node list.
        
        List all the selected nodes.
        Returns a list of all selected nodes in the current group. An attempt is made to return them in "useful" order where inputs are done before the final node, so commands applied to this list go from top-down. The argument filter instructs the algorithm to apply only to a specific class of nodes.
    
    show(...)
        show(n, forceFloat) -> None.
        
        Show the control panel of a node. The argument 'n' and 'forceFloat' are optional.
        If 'n' is not given the current node is used. The argument 'forceFloat' will open the window as a floating panel.
        Opens a window for each named node, as though the user double-clicked on them.  For normal operators this opens the control panel, for viewers it opens the viewer, for groups it opens the control panel.
    
    showDag(...)
        showDag(n) -> None.
        
        Show the tree view of a group node or opens a node control panel. The argument n is a node.
    
    showInfo(...)
        showInfo(node) -> string.
        
        Returns a long string of debugging information about each node and the operators it is currently managing. The node argument is optional.
    
    showSettings(...)
        showSettings() -> None.
        
        Show the settings of the current group.
    
    splayNodes(...)
        splayNodes() -> None.
    
    stderr_redirector(...)
        Internal to Nuke. Not for public use.
    
    tabClose(...)
        Close the active dock tab. Returns True if successful.
    
    tabNext(...)
        Make the next tabe in this dock active. Returns True if successful.
    
    tcl(...)
        tcl(command, arg, arg, ...) -> string.
        
        Run a tcl command. The arguments must be strings and passed to the command. If no arguments are given and the command has whitespace in it then it is instead interpreted as a tcl program (this is depreciated)
    
    thisClass(...)
        thisClass()->string.
        
        Same as thisNode().Class() but faster.
    
    thisGroup(...)
        thisGroup()->Group.
        
        Returns the current context Group node.
    
    thisKnob(...)
        thisKnob()->Knob.
        
        Returns the current context knob or None.
    
    thisNode(...)
        thisNode()->Node.
        
        Returns the current context node.
    
    thisPane(...)
        thisPane()->Pane.
        
        Returns the active pane. This is only valid during a pane menu callback or window layout restoration.
    
    thisParent(...)
        thisParent() -> Node.
        
        Returns the current context Node parent.
    
    toNode(...)
        toNode(s) -> node or None if doesn't exist.
        
        s is a string argument. Return a node in the DAG as a Python object.
    
    toggleFullscreen(...)
        toggleFullscreen() -> None.
        
        Toggles between windowed and fullscreen mode.
    
    toggleViewers(...)
        toggleAllViewers() -> None.
        
        Toggles all the viewers on and off.
    
    toolbar(...)
        toolbar(name, create)->ToolBar or None.
        
        Find and return the ToolBar object with the given name. The name of the built-in nodes toolbar is 'Nodes'.
        If the named ToolBar is not found and create is True, it will be created.
        If the named ToolBar is not found and create is False, None is returned.
        A RuntimeException is thrown if not in GUI mode.
    
    tprint(...)
        tprint(value, ..., sep=' ', end='\n', file=sys.stdout)
        
        Prints the values to a stream, or to sys.stdout by default.
        Optional keyword arguments:
        file: a file-like object (stream); defaults to the current sys.stdout.
        sep:  string inserted between values, default a space.
        end:  string appended after the last value, default a newline.
    
    undo(...)
        undo() -> None.
        
        Perform the most recent undo.
    
    updateUI()
    
    value(...)
        value(knob, default) -> string.
        
        The value function returns the current value of a knob. The knob argument is a string referring to a knob and default is an optional default value to be returned in case of an error. Unlike knob(), this will evaluate animation at the current frame, and expand brackets and dollar signs in string knobs.
    
    views(...)
        views() -> list of nodes.
        
        Return a list of all the globally existing views.
    
    zoom(...)
        zoom(scale, (center_x, center_y), group) -> double.
        
        Change the zoom and pan of a group's display. The scale argument is the new zoom factor. The (center_x, center_y) and group arguments are optional.
        If the group name is omitted then the current group is used. (Not yet implemented.)
        If the scale is given, but not the center, the zoom is set to the provided scale and the view is positioned so the cursor is pointing at the same place it was before zooming. A zero or negative scale value will cause a zoom-to-fit.
        If both scale and center arguments are given, the view is zoomed and then centered on the specified point.
        The new scale factor will be returned, or None if the function is run in a non-GUI context.

DATA
    AFTER_CONST = 21
    AFTER_LINEAR = 22
    ALL = 1
    BEFORE_CONST = 19
    BEFORE_LINEAR = 20
    BREAK = 18
    CONSTANT = 1
    CUBIC = 4
    DISABLED = 128
    ENDLINE = 8192
    EXE_PATH = '/method/cg/opt/Nuke6.0v4/Nuke6.0'
    EXPRESSIONS = 1
    FLOAT = 5
    FONT = 4
    GEO = 16
    GUI = True
    HIDDEN_INPUTS = 4
    HORIZONTAL = 17
    IMAGE = 1
    INPUTS = 2
    INT16 = 3
    INT8 = 2
    INTERACTIVE = True
    INVISIBLE = 1024
    LINEAR = 3
    LOG = 4
    MATCH_CLASS = 0
    MATCH_COLOR = 2
    MATCH_LABEL = 1
    MONITOR = 0
    NODIR = 2
    NO_ANIMATION = 256
    NO_POSTAGESTAMPS = False
    NO_UNDO = 524288
    NUKE_VERSION_DATE = 'Apr  8 2010'
    NUKE_VERSION_MAJOR = 6
    NUKE_VERSION_MINOR = 0
    NUKE_VERSION_PHASE = ''
    NUKE_VERSION_PHASENUMBER = 0
    NUKE_VERSION_RELEASE = 4
    NUKE_VERSION_STRING = '6.0v4'
    NUM_CPUS = 16
    NUM_INTERPOLATIONS = 5
    PLUGIN_EXT = 'so'
    PREPEND = 8
    PYTHON = 32
    REPLACE = 1
    SCRIPT = 2
    SMOOTH = 0
    STARTLINE = 4096
    TABBEGINCLOSEDGROUP = 2
    TABBEGINGROUP = 1
    TABENDGROUP = -1
    TABKNOB = 0
    THREADS = 16
    TO_SCRIPT = 1
    USER_SET_SLOPE = 16
    VIEWER = 1
    WRITE_ALL = 8
    WRITE_NON_DEFAULT_ONLY = 16
    WRITE_USER_KNOB_DEFS = 4
    __all__ = ['AColor_Knob', 'AFTER_CONST', 'AFTER_LINEAR', 'ALL', 'Anima...
    afterFrameRenders = {}
    afterRenders = {}
    autolabels = {'*': [(<function autolabel at 0x17262848>, (), {})]}
    beforeFrameRenders = {}
    beforeRenders = {}
    env = {'64bit': True, 'ExecutablePath': '/method/cg/op...True, 'numCPU...
    filenameFilters = {}
    knobChangeds = {}
    nodes = <Nodes object at 0x16f7c090>
    onCreates = {}
    onDestroys = {}
    onScriptCloses = {}
    onScriptLoads = {}
    onScriptSaves = {}
    onUserCreates = {}
    untitled = 'Untitled'
    updateUIs = {}
