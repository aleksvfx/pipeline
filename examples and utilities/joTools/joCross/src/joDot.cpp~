static const char* const CLASS = "joDot";


static const char* const HELP =
"calculates the dot product between two input"
"Vectors based coded in RGB = XYZ"
"\n\n\n";


#include <DDImage/Iop.h>
#include <DDImage/Row.h>
#include <DDImage/Tile.h>
#include <DDImage/Knobs.h>
#include "Point3.h"
#include "Vector.h"

using namespace DD::Image;


class joDot : public Iop {

public:
	
	joDot();
	int width;
	void _validate(bool);
	void _request(int,int,int,int,ChannelMask,int);
	void engine(int y,int x,int r, ChannelMask, Row&);
	virtual void knobs(Knob_Callback);
	const char* Class() const {return CLASS;}
	const char* node_help() const {return HELP;}
	static const Description d;
};

joDot::joDot() : Iop() 
{
	inputs( 2 );

}
void joDot::knobs(Knob_Callback f) 
{
	;
}


static Iop* joDot_c() 
{
	return new joDot();
}

const Iop::Description joDot::d(CLASS, "Filter/joDot", joDot_c);

void joDot::_validate(bool for_real)
{
	copy_info();
	input1().validate( for_real );
	set_out_channels( Mask_All );
	Format temp = info_.format();
	width = temp.width();
	info_.set( info_.x(), info_.y(), info_.r(), info_.t() );
}

void joDot::_request(int x,int y,int r,int t, ChannelMask channels, int count)
{
	input0().request(x,y,r,t, channels, count);
	input1().request(x,y,r,t, channels, count);
}

void joDot::engine(int y, int x, int r, ChannelMask channels, Row& out)
{
	out.range( 0, width );

	Row in1(x, r);
	Row in2(x, r);

	input0().get(y, x, r, channels, in1);
	input1().get(y, x, r, channels, in2);

	foreach (z, channels) 
	{
		float* outPixelsR = out.writable(Chan_Red);
		float* outPixelsG = out.writable(Chan_Green);
		float* outPixelsB = out.writable(Chan_Blue);

		for (int index = x; index < r; index++ ) 
		{
			Vector one( in1[Chan_Red][index], in1[Chan_Green][index],in1[Chan_Blue][index] );
			Vector two( in2[Chan_Red][index], in2[Chan_Green][index], in2[Chan_Blue][index]);
			
			if ( one.length() > 0.0001 && two.length() > 0.0001 )
			{
				float result = one.dot( two );

				outPixelsR[index] = result;
				outPixelsG[index] = result;
				outPixelsB[index] = result;

			} 
			else
			{
				outPixelsR[index] = 0.0f;
				outPixelsG[index] = 0.0f;
				outPixelsB[index] = 0.0f;
			}


			
		}
		
	}
}
