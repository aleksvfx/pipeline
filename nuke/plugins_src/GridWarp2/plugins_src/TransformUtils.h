/* TransformUtils.h
 *
 * Copyright (c) 2008 The Foundry Visionmongers Ltd.  All Rights Reserved.
 *
 * Merged from Digital Domain 11/11/08
 */

#ifndef __TRANSFORMUTILS_H__
#define __TRANSFORMUTILS_H__


#include <iostream>
#include <string>

#include <DDImage/Knob.h>
#include <DDImage/Matrix4.h>



/**
 * \brief Captures the transformation matrix and component expressions
 * from a Transform2d knob (i.e.: translate, rotate, etc.)
 *
 * Nodes can only support a single Transform2d knob. This class
 * helps evaluating captured transformation states for any given
 * frame. This way, we can evaluate and apply different
 * transformations at all levels, shape, curve and point.
 *
 * REQUIREMENTS: This class depends on the node having a Transform2d
 * knob AND an auxiliary knob called "evaluate" used for - shockingly -
 * evaluating expressions.
 *
 * Sample usage:
 * \code
 * Transform transform;
 * transform.evaluate( transform_knob, frame );
 * Matrix4 const& matrix = transform.get_matrix();
 * \endcode
 */
class GridTransform
{
public:
    GridTransform();

    /**
     * \brief Sets matrix and expressions to a state that results in an
     * identity transform.
     */
    void make_identity();

    /**
     * \brief Indicates if the transformation matrix is equivalent to the
     * identity. 
     */
    bool is_identity() const;

    /**
     * \brief Captures and evaluates a transformation for the given frame. 
     * \param knob A Transform2d knob.
     * \param frame Frame to evaluate.
     */
    void evaluate( DD::Image::Knob* knob, double frame );

    /**
     * \brief Captures component expressions from a Transform2d knob.
     * \param knob A Transform2d knob.
     */
    void from_knob( DD::Image::Knob* knob );

    /**
     * \brief Sets the previously captured state into the specified knob.
     * \param knob A Transform2d knob.
     */
    void to_knob( DD::Image::Knob* knob ) const;

    /**
     * \brief Evaluates previously captured component expressions from a Transform2d
     * knob.
     * \param knob A Transform2d knob used to access the auxiliary "evaluate" knob.
     * \param frame Frame to evaluate.
     */
    void goto_frame( DD::Image::Knob const* knob, double frame );

    /** \brief Writes transformation to a stream including component expressions and
     * evaluated matrix.
     *
     * Attempts to write only the components that are actually different than the
     * identity Transform (\a make_identity).
     *
     * The following is an example of a fully-written transform:
     * \code
     * { {translate 123 456} {rotate 45} {scale 0.5} {skew 0.1} {center 320 240}
     * {matrix {0.353553 -0.318198 0 406.23} {0.353553 0.388909 0 489.525} {0 0 1 0} {0 0 0 1}} }
     * \endcode
     *
     * \param out A standard output stream.
     */
    void to_script( std::ostream& out ) const;

    /** \brief Reads in from a string buffer.
     * \param text Text containing a transform usually generated by \a to_script.
     */
    bool from_script( std::string const& text );

    /** \brief Returns the last evaluated transformation matrix */
    DD::Image::Matrix4 const& get_matrix() const {
        return matrix;
    }

private:
    DD::Image::Matrix4 matrix;      //<! Actual transformation matrix.

    // Captured transformation components.
    std::string translate;
    std::string rotate;
    std::string scale;
    std::string skew;
    std::string center;

    bool identity;

    friend std::ostream& operator<< ( std::ostream& out, GridTransform const& transform );
};



/**
 * \brief Indicates if the given matrices are equal.
 * \param left A Matrix4.
 * \param right Another Matrix4.
 * \return True if equal, false otherwise.
 */
bool is_equal( DD::Image::Matrix4 const& left, DD::Image::Matrix4 const& right );


#endif // __TRANSFORMUTILS_H__
